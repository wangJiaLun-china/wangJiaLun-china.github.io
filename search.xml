<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>centos7安装redis</title>
    <url>/2021-08-03-centos7%20%E5%AE%89%E8%A3%85%20redis/</url>
    <content><![CDATA[<h2 id="centos7安装redis"><a href="#centos7安装redis" class="headerlink" title="centos7安装redis"></a><strong>centos7安装redis</strong></h2><ul>
<li><p>去官网<a href="https://redis.io/download%E4%B8%8B%E8%BD%BD%E5%AF%B9%E5%BA%94%E7%9A%84%E5%AE%89%E8%A3%85%E5%8C%85%E5%8C%85">https://redis.io/download下载对应的安装包包</a></p>
<p>wget <a href="https://download.redis.io/releases/redis-6.2.5.tar.gz">https://download.redis.io/releases/redis-6.2.5.tar.gz</a></p>
</li>
<li><p>安装依赖环境</p>
<ul>
<li><p>安装gcc环境</p>
<p><code>yum install gcc-c++</code></p>
</li>
</ul>
</li>
</ul>
 <span id="more"></span>

<ul>
<li><p>解压 <code>tar -zxvf redis-6.2.5.tar.gz </code></p>
</li>
<li><p>执行<code>make</code>命令</p>
<p>如未找到make命令安装一下<code>yum -y install gcc automake autoconf libtool make</code></p>
</li>
<li><p>安装 <code>make install</code></p>
</li>
</ul>
<ul>
<li><p>拷贝一份核心配置文件到<code>/usr/local</code>下方便管理</p>
<p><code>mkdir -p /usr/local/redis/workspace</code></p>
<p><code>cp redis.conf /usr/local/redis/</code></p>
</li>
<li><p>修改<code>redis.conf</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置是否后台运行</span></span><br><span class="line"><span class="attr">daemonize</span> <span class="string">yes</span></span><br><span class="line"><span class="comment"># redis 工作目录</span></span><br><span class="line"><span class="comment"># The working directory.</span></span><br><span class="line"><span class="attr">dir</span> <span class="string">/usr/local/redis/workspace</span></span><br><span class="line"><span class="comment"># 配置外部远程调用</span></span><br><span class="line"><span class="attr">bind</span> <span class="string">0.0.0.0</span></span><br><span class="line"><span class="comment"># 配置密码，默认是注释的</span></span><br><span class="line"><span class="attr">requirepass</span> <span class="string">wangjialun</span></span><br></pre></td></tr></table></figure></li>
<li><p>拷贝<code>utils</code>下的<code>redis_init_script</code>到<code>/etc/init.d/</code>下准备设置为开机自启动</p>
<p>修改<code>redis_init_script</code>里面的redis.conf配置文件地址和chkconfig</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在文件头部添加下面两行注释</span></span><br><span class="line"><span class="comment"># chkconfig: 2345 10 90  </span></span><br><span class="line"><span class="comment"># description: Start and Stop redis </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 原先 CONF=&quot;/etc/redis/$&#123;REDISPORT&#125;.conf&quot;</span></span><br><span class="line"><span class="attr">CONF</span>=<span class="string">/usr/local/redis/redis.conf</span></span><br></pre></td></tr></table></figure></li>
<li><p>赋予权限<code>chmod 755 redis_init_script</code> </p>
</li>
<li><p>设为开机自启<code>chkconfig redis_init_script on</code> </p>
</li>
<li><p><code>./redis_init_script start</code> 启动</p>
</li>
</ul>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7安装rabbitMQ</title>
    <url>/2021-09-02-centos7%E5%AE%89%E8%A3%85rabbitMQ/</url>
    <content><![CDATA[<h2 id="centos7安装-rabbitMQ"><a href="#centos7安装-rabbitMQ" class="headerlink" title="centos7安装 rabbitMQ"></a><strong>centos7安装 rabbitMQ</strong></h2><ul>
<li><p>安装准备</p>
<ul>
<li><p>rabbitMQ依赖Erlang环境, 参照<a href="https://www.rabbitmq.com/which-erlang.html">版本对应地址</a>至github上下载对应<a href="https://github.com/rabbitmq/erlang-rpm/releases">erlang-rpm</a></p>
</li>
<li><p>下载<a href="https://github.com/rabbitmq/rabbitmq-server/releases/">rabbitMQ</a>对应版本rpm</p>
<p>不能科学上网的可以去百度云获取相关包：<a href="https://pan.baidu.com/s/1PtoOLgC3sIUStxGyECT8kg">https://pan.baidu.com/s/1PtoOLgC3sIUStxGyECT8kg</a><br>提取码：8888 </p>
</li>
</ul>
</li>
<li><p>安装服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装基础软件包</span></span><br><span class="line">yum install build-essential openssl openssl-devel unixODBC unixODBC-devel make gcc gcc-c++ kernel-devel m4 ncurses-devel tk tc xz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装erlang</span></span><br><span class="line">rpm -ivh erlang-24.0.5-1.el8.x86_64.rpm</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装socat</span></span><br><span class="line">yum install -y socat</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装rabbitMq</span></span><br><span class="line">rpm -ivh rabbitmq-server-3.8.22-1.el8.noarch.rpm</span><br></pre></td></tr></table></figure></li>
</ul>
<span id="more"></span>

<ul>
<li><p>rabbitMQ命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动服务</span></span><br><span class="line">systemctl start rabbitmq-server</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看状态</span></span><br><span class="line">systemctl status rabbitmq-server</span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止服务</span></span><br><span class="line">systemctl stop rabbitmq-server</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置开机启动</span></span><br><span class="line">systemctl enable rabbitmq-server</span><br><span class="line"><span class="meta">#</span><span class="bash"> 开启web管理插件, web默认访问端口是15672</span></span><br><span class="line">rabbitmq-plugins enable rabbitmq_management</span><br><span class="line"><span class="meta">#</span><span class="bash"> rabbitmq有一个默认的guest用户，但只能通过localhost访问，所以需要添加一个能够远程访问的用户。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加用户</span></span><br><span class="line">rabbitmqctl add_user admin 123456</span><br><span class="line"><span class="meta">#</span><span class="bash"> 为用户分配操作权限</span></span><br><span class="line">rabbitmqctl set_user_tags admin administrator</span><br><span class="line"><span class="meta">#</span><span class="bash"> 为用户分配权限</span></span><br><span class="line">rabbitmqctl set_permissions -p / admin &quot;&quot;.&quot; &quot;.&quot;&quot; &quot;.*”</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>rabbitMQ</category>
      </categories>
      <tags>
        <tag>rabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7安装elasticsearch</title>
    <url>/2021-08-17-centos7%E5%AE%89%E8%A3%85%20elasticsearch/</url>
    <content><![CDATA[<h2 id="centos7安装elasticsearch"><a href="#centos7安装elasticsearch" class="headerlink" title="centos7安装elasticsearch"></a><strong>centos7安装elasticsearch</strong></h2><ul>
<li><p>去官网<a href="https://www.elastic.co/cn/downloads/past-releases%E4%B8%8B%E8%BD%BD%E5%AF%B9%E5%BA%94%E7%9A%84%E5%AE%89%E8%A3%85%E5%8C%85%E5%8C%85">https://www.elastic.co/cn/downloads/past-releases下载对应的安装包包</a></p>
<p>wget <a href="https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.4.3.tar.gz">https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.4.3.tar.gz</a></p>
</li>
</ul>
<ul>
<li><p>解压 <code>tar -zxvf elasticsearch-6.4.3.tar.gz </code></p>
</li>
<li><p>修改配置文件,默认不支持远程连接</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">cluster.name</span>: <span class="string">es6</span></span><br><span class="line"><span class="meta">node.name</span>: <span class="string">node0</span></span><br><span class="line"><span class="meta">path.data</span>: <span class="string">/usr/local/elasticsearch-6.4.3/data</span></span><br><span class="line"><span class="meta">path.logs</span>: <span class="string">/usr/local/elasticsearch-6.4.3/logs</span></span><br><span class="line"><span class="meta">network.host</span>: <span class="string">0.0.0.0</span></span><br></pre></td></tr></table></figure></li>
<li><p>ElasticSearch 可以接收脚本执行,默认不支持root用户启动</p>
<ul>
<li>添加专门用户<code>useradd elastic</code></li>
<li>修改解压后elasticsearch文件夹所属用户<code>chown -R elastic:elastic elasticsearch-6.4.3</code></li>
<li>切换用户<code>su elsearch</code>后台启动<code>./elasticsearch -d</code></li>
</ul>
</li>
<li><p>启动后会占用两个端口</p>
<ul>
<li>9200 是ES节点与外部通讯使用的端口, 是http协议的RESTful接口.</li>
<li>9300 是ES节点之间通讯使用的端口, 是tcp通讯端口，集群间和TCPclient都走的9300。（java程序中使用ES时，在配置文件中要配置该端口）</li>
</ul>
</li>
</ul>
 <span id="more"></span>

<h4 id="中文分词"><a href="#中文分词" class="headerlink" title="中文分词"></a>中文分词</h4><ul>
<li><p>下载地址<code>https://github.com/medcl/elasticsearch-analysis-ik/releases</code></p>
<p><code>wget https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v6.4.3/elasticsearch-analysis-ik-6.4.3.zip</code></p>
<p>解压到<code>/plugins/ik</code>下面</p>
</li>
</ul>
<h3 id="图形化界面-kibana"><a href="#图形化界面-kibana" class="headerlink" title="图形化界面 kibana"></a>图形化界面 kibana</h3><ul>
<li><p>官网地址<code>https://www.elastic.co/cn/downloads/past-releases#kibana</code></p>
<p><code>wget https://artifacts.elastic.co/downloads/kibana/kibana-6.4.3-linux-x86_64.tar.gz</code></p>
</li>
</ul>
<h4 id="问题及处理"><a href="#问题及处理" class="headerlink" title="问题及处理"></a>问题及处理</h4><ul>
<li><p><strong>线程数不够</strong></p>
<ul>
<li><p>错误日志</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ERROR: [2] bootstrap checks failed</span><br><span class="line">[1]: max number of threads [3000] for user [elastic] is too low, increase to at least [4096]</span><br></pre></td></tr></table></figure></li>
<li><p><code>vi /etc/security/limits.conf</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">* soft nofile 65536</span><br><span class="line">* hard nofile 65536</span><br><span class="line">* soft nproc 65536</span><br><span class="line">* hard nproc 65536</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>max_map_count  too low</strong></p>
<ul>
<li><p>错误日志</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ERROR: [1] bootstrap checks failed</span><br><span class="line">[1]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</span><br></pre></td></tr></table></figure></li>
<li><p><code>vi /etc/sysctl.conf</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vm.max_map_count = 655360</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>elasticsearch</category>
      </categories>
      <tags>
        <tag>elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7 安装fastDFS</title>
    <url>/2021-08-23-centos7%E5%AE%89%E8%A3%85%20fastFDS/</url>
    <content><![CDATA[<h2 id="centos7-安装fastDFS"><a href="#centos7-安装fastDFS" class="headerlink" title="centos7 安装fastDFS"></a><strong>centos7 安装fastDFS</strong></h2><ul>
<li><p>安装gcc</p>
<p><code>yum install -y gcc gcc-c++</code></p>
</li>
<li><p>安装libevent</p>
<p><code>yum -y install libevent</code></p>
</li>
<li><p>安装libfastcommon</p>
<p>libfastcommon是官方提供的FastDFS运行依赖的库 <a href="https://github.com/happyfish100/libfastcommon/tags">点此下载</a></p>
<span id="more"></span>

<p>github访问不了可以尝试我上传的百度云链接</p>
<p><code>链接：https://pan.baidu.com/s/1gJ7S7NIb3MzUciIXFhoTPQ 提取码：8888</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf libfastcommon-1.0.42.tar.gz -C /usr/local/</span><br><span class="line">cd /usr/local/libfastcommon-1.0.42/</span><br><span class="line">./make.sh</span><br><span class="line">./make.sh install</span><br></pre></td></tr></table></figure></li>
<li><p>安装fastFDS主程序</p>
<p><a href="https://github.com/happyfish100/fastdfs/tags">官网下载</a> 或者前面的百度云 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf fastdfs-6.04.tar.gz</span><br><span class="line">cd fastdfs-6.04/</span><br><span class="line">./make.sh</span><br><span class="line">./make.sh install</span><br></pre></td></tr></table></figure></li>
<li><p>安装成功将安装目录下的conf下的文件拷贝到/etc/fdfs/下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp conf/* /etc/fdfs/</span><br></pre></td></tr></table></figure></li>
<li><p>配置<code>tracker.conf</code>,路径不存在就创建一下</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">base_path</span>=<span class="string">/usr/local/fastdfs/tracker</span></span><br></pre></td></tr></table></figure>

<p><code>tracker</code>启动命令<code>/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf</code></p>
</li>
<li><p>配置<code>storage.conf</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">base_path=/usr/local/fastdfs/storage</span><br><span class="line"><span class="meta">#</span><span class="bash">配置组名</span></span><br><span class="line">group_name=group1 </span><br><span class="line"><span class="meta">#</span><span class="bash"> 存储地址, 可以配置多个挂载磁盘</span></span><br><span class="line">store_path0=/usr/local/fastdfs/storage</span><br><span class="line"><span class="meta">#</span><span class="bash">配置tracker服务器:IP (我总共是用了两台服务器,上一台启的tracker,这一台配置stroage使用刚配的tarcker服务地址)</span></span><br><span class="line">tracker_server=192.168.31.29:22122</span><br><span class="line"><span class="meta">#</span><span class="bash">配置http端口</span></span><br><span class="line">http.server_port=8888</span><br></pre></td></tr></table></figure>

<p><code>storage</code>启动命令<code>/usr/bin/fdfs_storaged /etc/fdfs/storage.conf</code></p>
<p>ps: 得先启动<code>tarcker</code>才能启动<code>storage</code></p>
</li>
<li><p><strong>测试</strong> 配置<code>client.conf</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">base_path=/usr/local/fastdfs/client</span><br><span class="line">tracker_server=192.168.31.29:22122</span><br></pre></td></tr></table></figure>

<p>测试上传<code>/usr/bin/fdfs_test /etc/fdfs/client.conf upload anti-steal.jpg</code></p>
</li>
</ul>
]]></content>
      <categories>
        <category>fastFDS</category>
      </categories>
      <tags>
        <tag>fastFDS</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7安装nginx</title>
    <url>/2021-07-27-centos7%E5%AE%89%E8%A3%85%20nginx/</url>
    <content><![CDATA[<h2 id="centos7安装nginx"><a href="#centos7安装nginx" class="headerlink" title="centos7安装nginx"></a><strong>centos7安装nginx</strong></h2><ul>
<li><p>去官网<a href="http://nginx.org/%E4%B8%8B%E8%BD%BD%E5%AF%B9%E5%BA%94%E7%9A%84nginx%E5%8C%85">http://nginx.org/下载对应的nginx包</a></p>
<p>wget <a href="https://nginx.org/download/nginx-1.16.1.tar.gz">https://nginx.org/download/nginx-1.16.1.tar.gz</a></p>
</li>
<li><p>安装依赖环境</p>
<ul>
<li><p>安装gcc环境</p>
<p><code>yum install gcc-c++</code></p>
</li>
<li><p>安装PCRE库，用于解析正则表达式</p>
<p><code>yum install -y pcre pcre-devel</code></p>
</li>
<li><p>zlib压缩和解压缩依赖，</p>
<p><code>yum install -y zlib zlib-devel</code></p>
</li>
<li><p>SSL 安全的加密的套接字协议层，用于HTTP安全传输，也就是https</p>
<p><code>yum install -y openssl openssl-devel </code></p>
</li>
</ul>
</li>
</ul>
 <span id="more"></span>

<ul>
<li><p>解压，需要注意，解压后得到的是源码，源码需要编译后才能安装</p>
<p><code>tar -zxvf nginx-1.16.1.tar.gz </code></p>
</li>
<li><p>创建安装目录和临时目录</p>
<p><code>mkdir -p /usr/local/nginx</code></p>
<p><code>mkdir -p /var/temp/nginx</code></p>
</li>
<li><p>创建makefile文件</p>
<ul>
<li><pre><code class="sh"> ./configure \
 --prefix=/usr/local/nginx \
 --pid-path=/var/run/nginx/nginx.pid \
 --lock-path=/var/lock/nginx.lock \
 --error-log-path=/var/log/nginx/error.log \
 --http-log-path=/var/log/nginx/access.log \
 --with-http_gzip_static_module \
 --http-client-body-temp-path=/var/temp/nginx/client \
 --http-proxy-temp-path=/var/temp/nginx/proxy \
 --http-fastcgi-temp-path=/var/temp/nginx/fastcgi \
 --http-uwsgi-temp-path=/var/temp/nginx/uwsgi \
 --http-scgi-temp-path=/var/temp/nginx/scgi
</code></pre>
</li>
<li><p>参数解释：</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td align="left">–prefix</td>
<td>指定nginx安装目录</td>
</tr>
<tr>
<td align="left">–pid-path</td>
<td>指向nginx的pid</td>
</tr>
<tr>
<td align="left">–lock-path</td>
<td>锁定安装文件，防止被恶意篡改或误操作</td>
</tr>
<tr>
<td align="left">–error-log</td>
<td>错误日志</td>
</tr>
<tr>
<td align="left">–http-log-path</td>
<td>http日志</td>
</tr>
<tr>
<td align="left">–with-http_gzip_static_module</td>
<td>启用gzip模块，在线实时压缩输出数据流</td>
</tr>
<tr>
<td align="left">–http-client-body-temp-path</td>
<td>设定客户端请求的临时目录</td>
</tr>
<tr>
<td align="left">–http-proxy-temp-path</td>
<td>设定http代理临时目录</td>
</tr>
<tr>
<td align="left">–http-fastcgi-temp-path</td>
<td>设定fastcgi临时目录</td>
</tr>
<tr>
<td align="left">–http-uwsgi-temp-path</td>
<td>设定uwsgi临时目录</td>
</tr>
<tr>
<td align="left">–http-scgi-temp-path</td>
<td>设定scgi临时目录</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
<li><p>make 编译</p>
<p>执行<code>make</code>命令</p>
<p>如未找到make命令安装一下<code>yum -y install gcc automake autoconf libtool make</code></p>
</li>
<li><p>安装</p>
<p><code>make install</code></p>
</li>
<li><p>进入sbin目录启动nginx</p>
<p><code>./nginx</code></p>
</li>
</ul>
]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>fastDFS配置nginx访问</title>
    <url>/2021-08-26-fastDFS%E9%85%8D%E7%BD%AEnginx%E8%AE%BF%E9%97%AE/</url>
    <content><![CDATA[<h2 id="fastDFS配置nginx访问"><a href="#fastDFS配置nginx访问" class="headerlink" title="fastDFS配置nginx访问"></a><strong>fastDFS配置nginx访问</strong></h2><ul>
<li><p><a href="https://www.wangjialun.top/2021-07-27-centos7%E5%AE%89%E8%A3%85%20nginx/">nginx 安装教程</a></p>
</li>
<li><p><a href="https://www.wangjialun.top/2021-08-23-centos7%E5%AE%89%E8%A3%85%20fastFDS/#more">fastDFS 安装教程</a></p>
</li>
<li><p>安装nginx插件  <a href="https://github.com/happyfish100/fastdfs-nginx-module.git">下载地址</a> 或者fastDFS安装教程里面的百度云有</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 解压nginx的fastdfs压缩包</span></span><br><span class="line">tar -zxvf fastdfs-nginx-module-1.22.tar.gz</span><br><span class="line">cp mod_fastdfs.conf /etc/fdfs/</span><br></pre></td></tr></table></figure></li>
<li><p>nginx重新make下<code>add-module</code>是nginx插件解压后的目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./configure \</span><br><span class="line">--prefix=/usr/local/nginx \</span><br><span class="line">--pid-path=/var/run/nginx/nginx.pid \</span><br><span class="line">--lock-path=/var/lock/nginx.lock \</span><br><span class="line">--error-log-path=/var/log/nginx/error.log \</span><br><span class="line">--http-log-path=/var/log/nginx/access.log \</span><br><span class="line">--with-http_gzip_static_module \</span><br><span class="line">--http-client-body-temp-path=/var/temp/nginx/client \</span><br><span class="line">--http-proxy-temp-path=/var/temp/nginx/proxy \</span><br><span class="line">--http-fastcgi-temp-path=/var/temp/nginx/fastcgi \</span><br><span class="line">--http-uwsgi-temp-path=/var/temp/nginx/uwsgi \</span><br><span class="line">--http-scgi-temp-path=/var/temp/nginx/scgi \</span><br><span class="line">--add-module=/usr/local/package/fastdfs-nginx-module-1.22/src</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p><code>make</code></p>
<p><code>make install</code></p>
</li>
<li><p>配置nginx访问</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/fdfs/mod_fastdfs.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改 tarcker_server</span></span><br><span class="line">tracker_server=192.168.31.29:22122</span><br><span class="line"><span class="meta">#</span><span class="bash"> 卷名和前面fastDFS配置保持统一</span></span><br><span class="line">group_name=wangjialun</span><br><span class="line">url_have_group_name=true</span><br><span class="line">base_path=/usr/local/fastdfs/tmp</span><br><span class="line"><span class="meta">#</span><span class="bash"> 存储地址</span></span><br><span class="line">store_path0=/usr/local/fastdfs/storage</span><br><span class="line">vim /usr/local/nginx/conf/nginx.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加nginx配置</span></span><br><span class="line">	server &#123;</span><br><span class="line"><span class="meta">		 #</span><span class="bash"><span class="comment"># 该端口为storage.conf中的http.server_port相同</span></span></span><br><span class="line">        listen       8888; </span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">		location ~/M00 &#123;</span><br><span class="line">			ngx_fastdfs_module;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">    &#125;	</span><br></pre></td></tr></table></figure></li>
<li><p><a href="https://github.com/happyfish100/fastdfs/wiki">官网教程</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>fastDFS</tag>
      </tags>
  </entry>
  <entry>
    <title>keepalived 双主热备</title>
    <url>/2021-08-03-keepalived%20%E5%8F%8C%E4%B8%BB%E7%83%AD%E5%A4%87/</url>
    <content><![CDATA[<h2 id="keepalived-双主热备"><a href="#keepalived-双主热备" class="headerlink" title="keepalived 双主热备"></a><strong>keepalived 双主热备</strong></h2><ul>
<li><p>首先配置好双机主备参照 我之前的 <a href="https://www.wangjialun.top/2021-08-02-keepalived%20%E5%8F%8C%E6%9C%BA%E4%B8%BB%E5%A4%87/#more"><strong>安装配置</strong></a>  </p>
</li>
<li><p>在之前主机的keepalived核心配置文件中新增一个<strong>BACKUP</strong>虚拟节点</p>
<p>在之前备用机的keepalived核心配置文件中新增一个<strong>MASTER</strong>虚拟节点</p>
<span id="more"></span>

<h1 id="之前主机配置"><a href="#之前主机配置" class="headerlink" title="之前主机配置"></a>之前主机配置</h1><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">! Configuration File for keepalived</span></span><br><span class="line"></span><br><span class="line"><span class="attr">global_defs</span> <span class="string">&#123;</span></span><br><span class="line">   <span class="attr">router_id</span> <span class="string">keep_96</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="comment">## 节省篇幅省略，之前主机配置不需要修改</span></span><br><span class="line"><span class="attr">vrrp_instance</span> <span class="string">VI_1 &#123;</span></span><br><span class="line">	<span class="attr">//...</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="comment">## 新增</span></span><br><span class="line"><span class="comment"># 可以复制之前的备用机核心配置过来修改为VI_2</span></span><br><span class="line"><span class="attr">vrrp_instance</span> <span class="string">VI_2 &#123;</span></span><br><span class="line">    <span class="attr">state</span> <span class="string">BACKUP</span></span><br><span class="line">    <span class="attr">interface</span> <span class="string">enp0s3</span></span><br><span class="line"><span class="comment">    # 修改 router_id</span></span><br><span class="line">    <span class="attr">virtual_router_id</span> <span class="string">52</span></span><br><span class="line">    <span class="attr">priority</span> <span class="string">80</span></span><br><span class="line">    <span class="attr">advert_int</span> <span class="string">1</span></span><br><span class="line">    <span class="attr">authentication</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">auth_type</span> <span class="string">PASS</span></span><br><span class="line">        <span class="attr">auth_pass</span> <span class="string">1111</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="comment">     # 修改 虚拟ip</span></span><br><span class="line">    <span class="attr">virtual_ipaddress</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">192.168.31.197</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="之前备用机配置"><a href="#之前备用机配置" class="headerlink" title="之前备用机配置"></a>之前备用机配置</h1><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">! Configuration File for keepalived</span></span><br><span class="line"></span><br><span class="line"><span class="attr">global_defs</span> <span class="string">&#123;</span></span><br><span class="line"><span class="comment">   # 路由id: 当前安装keepalived节点主机的标识符，全局唯一</span></span><br><span class="line">   <span class="attr">router_id</span> <span class="string">keep_226</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">## 节省篇幅省略，之前备用机配置不需要修改</span></span><br><span class="line"><span class="attr">vrrp_instance</span> <span class="string">VI_1 &#123;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">## 新增</span></span><br><span class="line"><span class="comment"># 可以复制之前的主机核心配置过来修改为VI_2</span></span><br><span class="line"><span class="attr">vrrp_instance</span> <span class="string">VI_2 &#123;</span></span><br><span class="line">    <span class="attr">state</span> <span class="string">MASTER</span></span><br><span class="line">    <span class="attr">interface</span> <span class="string">enp0s3</span></span><br><span class="line"><span class="comment">    # 修改 router_id</span></span><br><span class="line">    <span class="attr">virtual_router_id</span> <span class="string">52</span></span><br><span class="line">    <span class="attr">priority</span> <span class="string">100</span></span><br><span class="line">    <span class="attr">advert_int</span> <span class="string">1</span></span><br><span class="line">    <span class="attr">authentication</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">auth_type</span> <span class="string">PASS</span></span><br><span class="line">        <span class="attr">auth_pass</span> <span class="string">1111</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="comment">     # 修改 虚拟ip</span></span><br><span class="line">    <span class="attr">virtual_ipaddress</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">192.168.31.197</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>配置完成后重启一下keepalived</p>
<p>ip addr 会发现两台服务器都绑定了一个keepalived里配置的<code>MASTER</code>的ip</p>
<p>此时就实现了两台服务器互为主备配置</p>
]]></content>
      <categories>
        <category>keepalived</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>keepalived 双机主备</title>
    <url>/2021-08-02-keepalived%20%E5%8F%8C%E6%9C%BA%E4%B8%BB%E5%A4%87/</url>
    <content><![CDATA[<h2 id="keepalived-双机主备"><a href="#keepalived-双机主备" class="headerlink" title="keepalived 双机主备"></a><strong>keepalived 双机主备</strong></h2><h4 id="主机配置"><a href="#主机配置" class="headerlink" title="主机配置"></a>主机配置</h4><ul>
<li><p>安装 </p>
<p>到<a href="https://keepalived.org/download.html">https://keepalived.org/download.html</a> 官网下载</p>
<p><code>wget https://keepalived.org/software/keepalived-2.2.2.tar.gz</code></p>
<p><code>tar -zxvf keepalived-2.2.2.tar.gz </code></p>
<p>创建makefile 文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/usr/local/keepalived --sysconf=/etc</span><br></pre></td></tr></table></figure>

<p><code>make</code></p>
<p><code>make install</code></p>
</li>
</ul>
<span id="more"></span>

<ul>
<li><p>注册成系统服务</p>
<p>进入<code>keepalived/etc</code>下面</p>
<p>先拷贝到系统的etc下面，提示覆盖就直接覆盖</p>
<p><code>cp  init.d/keepalived /etc/init.d/</code></p>
<p><code>cp  sysconfig/keepalived /etc/sysconfig</code></p>
<p>再刷新一下</p>
<p><code>systemctl daemon-reload</code></p>
</li>
<li><p>配置</p>
<p>核心配置文件在前面指定的<code>/etc/keepalived</code>下面的<code>keepalived.conf</code>文件中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line"><span class="meta">   #</span><span class="bash"> 路由id: 当前安装keepalived节点主机的标识符，全局唯一</span></span><br><span class="line">   router_id keep_96</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 计算机节点</span></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line"><span class="meta">	#</span><span class="bash"> 表示状态是MASTER主机还是备用机BACKUP</span></span><br><span class="line">    state MASTER</span><br><span class="line"><span class="meta">	#</span><span class="bash"> 该实例绑定的网卡 通过 ip addr 查看网卡信息</span></span><br><span class="line">    interface enp0s3</span><br><span class="line"><span class="meta">	#</span><span class="bash"> 保证主备节点一致即可</span></span><br><span class="line">    virtual_router_id 51</span><br><span class="line"><span class="meta">	#</span><span class="bash"> 权重，master权重一般高于backup，如果有多个，那就是选举，谁的权重高，谁就当选</span></span><br><span class="line">    priority 100</span><br><span class="line"><span class="meta">	#</span><span class="bash"> 主备之间同步检查时间间隔(心跳)，单位秒</span></span><br><span class="line">    advert_int 1</span><br><span class="line"><span class="meta">	#</span><span class="bash"> 认证权限密码，防止非法节点进入</span></span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">	#</span><span class="bash"> 虚拟出来的ip，可以有多个（vip）</span></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.31.196</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>启动</p>
<p>到安装路径<code>/usr/local/keepalived</code>文件下面的<code>sbin</code>内执行<code>./keepalived</code></p>
<p>或者前面注册成系统服务的也可以通过<code>systemctl start keepalived.service</code>来操作</p>
<p>此时访问192.168.31.196也能访问到这台主机</p>
</li>
</ul>
<h4 id="双机主备"><a href="#双机主备" class="headerlink" title="双机主备"></a>双机主备</h4><p>在另外一台主机上按上述步骤安装后修改核心配置文件<code>keepalived.conf</code>文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line"><span class="meta">   #</span><span class="bash"> 路由id: 当前安装keepalived节点主机的标识符，全局唯一</span></span><br><span class="line">   router_id keep_226</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 计算机节点 名称不需要修改</span></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line"><span class="meta">	#</span><span class="bash"> 状态修改为BACKUP</span></span><br><span class="line">    state BACKUP</span><br><span class="line"><span class="meta">	#</span><span class="bash"> 查看修改网卡信息</span></span><br><span class="line">    interface enp0s3</span><br><span class="line"><span class="meta">	#</span><span class="bash"> 保证主备节点一致即可</span></span><br><span class="line">    virtual_router_id 51</span><br><span class="line"><span class="meta">	#</span><span class="bash"> 权重修改比主节点小</span></span><br><span class="line">    priority 80</span><br><span class="line"><span class="meta">	#</span><span class="bash"> 主备之间同步检查时间间隔(心跳)，单位秒</span></span><br><span class="line">    advert_int 1</span><br><span class="line"><span class="meta">	#</span><span class="bash"> 认证权限密码，防止非法节点进入</span></span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">	#</span><span class="bash"> 虚拟出来的ip，配置和主节点的一样</span></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.31.196</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时<code>ip addr</code>查看信息，发现keepalived并未绑定192.168.31.196的ip</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">enp0s3: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000</span><br><span class="line">   link/ether 08:00:27:19:36:03 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">   inet 192.168.31.226/24 brd 192.168.31.255 scope global dynamic noprefixroute enp0s3</span><br><span class="line">      valid_lft 18581sec preferred_lft 18581sec</span><br><span class="line">   inet6 240e:3a1:43f:8b0:a00:27ff:fe19:3603/64 scope global dynamic noprefixroute </span><br><span class="line">      valid_lft 7172sec preferred_lft 7172sec</span><br><span class="line">   inet6 fe80::a00:27ff:fe19:3603/64 scope link noprefixroute </span><br><span class="line">      valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure>
<p>当去主机的服务器执行<code>systemctl stop keepalived.service</code>关闭 keepalived 后<br>执行<code>ip addr</code>查看信息, 发现备用机生效绑定了192.168.31.196的ip</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">enp0s3: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000</span><br><span class="line">    link/ether 08:00:27:19:36:03 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.31.226/24 brd 192.168.31.255 scope global dynamic noprefixroute enp0s3</span><br><span class="line">       valid_lft 18313sec preferred_lft 18313sec</span><br><span class="line">    inet 192.168.31.196/32 scope global enp0s3</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 240e:3a1:43f:8b0:a00:27ff:fe19:3603/64 scope global dynamic noprefixroute </span><br><span class="line">       valid_lft 7135sec preferred_lft 7135sec</span><br><span class="line">    inet6 fe80::a00:27ff:fe19:3603/64 scope link noprefixroute </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure>
<p>此时再去主机的服务器执行<code>systemctl start keepalived.service</code> 恢复启动 keepalived 后，会发现备用机解绑ip，主机接管</p>
]]></content>
      <categories>
        <category>keepalived</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>docker</title>
    <url>/2021-04-26-docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul>
<li>镜像（Image）<ul>
<li> 镜像就是一个只读的模板。</li>
<li> 镜像可以用来创建 Docker 容器。</li>
</ul>
</li>
<li>容器（Container）<ul>
<li> 容器可以运行应用</li>
<li> 容器是从镜像创建的运行实例，允许被启动，开始，停止，删除</li>
<li> 各个容器之间相互隔离保证安全，相当于一个独立的linux环境</li>
</ul>
</li>
<li>仓库（Repository）<ul>
<li> 仓库分为公开仓库（Public）和私有仓库（Private）两种形式</li>
<li> 仓库是集中存放镜像文件的场所</li>
</ul>
</li>
</ul>
<span id="more"></span>

<h2 id="CentOS-系列安装-Docker"><a href="#CentOS-系列安装-Docker" class="headerlink" title="CentOS 系列安装 Docker"></a>CentOS 系列安装 Docker</h2><p>​    Docker支持 CentOS6.5 及之后版本</p>
<p>​    使用<code>uname -r</code> 查看系统内核版本</p>
<p>​    使用 <code>yum -y update</code> 升级所有包，包含软件和系统内核</p>
<p>​    使用<code>yum -y upgrade</code> 只升级包，不升级软件和系统内核</p>
<ul>
<li><p>CentOS6  </p>
<ul>
<li>要求系统为64位 ，系统内核版本位 2.6.32-431 及以上版本</li>
<li>CentOS6，可以使用 EPEL 库安装 Docker，命令如下</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install http://mirrors.yun-idc.com/epel/6/i386/epel-release-68.noarch.rpm</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install docker-io</span></span><br></pre></td></tr></table></figure></li>
<li><p>CentOS7</p>
<ul>
<li>系统64位，系统内核版本3.10以上</li>
<li>CentOS7 系统 CentOS-Extras 库中已带 Docker，可以直接安装：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install docker</span></span><br></pre></td></tr></table></figure>

<ul>
<li>安装之后启动 Docker 服务，并使其随系统自动加载</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo service docker start</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo chkconfig docker on</span></span><br></pre></td></tr></table></figure></li>
<li><p>查看Docker 版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure></li>
<li><p>查看Docker  信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Docker-镜像"><a href="#Docker-镜像" class="headerlink" title="Docker 镜像"></a>Docker 镜像</h2><ul>
<li>Docker 运行容器前 需要本地存在对应镜像</li>
<li>如镜像本地不存在，Docker 会冲镜像仓库下载（默认是Docker Hub 公共注册服务器中的仓库）</li>
</ul>
<h3 id="列出镜像列表"><a href="#列出镜像列表" class="headerlink" title="列出镜像列表"></a>列出镜像列表</h3><ul>
<li>使用 <code>docker images </code> 列出本地主机 镜像 </li>
</ul>
<h4 id="docker-images列表参数"><a href="#docker-images列表参数" class="headerlink" title="docker images列表参数"></a>docker images列表参数</h4><ul>
<li>REPOSITORY： 镜像的仓库源</li>
<li>TAG: 镜像的标签 （同一个仓库有可以有多个TAG，代表不此仓库源不同版本）</li>
<li>IMAGE ID: 镜像 ID</li>
<li>CREATED： 镜像创建时间</li>
<li>SIZE: 镜像大小</li>
</ul>
<h3 id="获取新的镜像"><a href="#获取新的镜像" class="headerlink" title="获取新的镜像"></a>获取新的镜像</h3><ul>
<li>当使用不存在镜像时Docker会自动下载此镜像</li>
<li>也可以预先下载此镜像，使用<code>docker pull</code> 命令</li>
</ul>
<h3 id="查找镜像"><a href="#查找镜像" class="headerlink" title="查找镜像"></a>查找镜像</h3><ul>
<li>使用<code>docker search</code> 命令搜索镜像</li>
</ul>
<h4 id="docker-search列表参数"><a href="#docker-search列表参数" class="headerlink" title="docker search列表参数"></a>docker search列表参数</h4><ul>
<li>NAME: 镜像仓库源的名称</li>
<li>DESCPIPTION: 镜像描述</li>
<li>OFFICIAL: 是否Docker官方发布</li>
</ul>
<h3 id="拖取镜像"><a href="#拖取镜像" class="headerlink" title="拖取镜像"></a>拖取镜像</h3><ul>
<li>使用<code>docker pull</code> 命令</li>
</ul>
<h3 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h3><ul>
<li><p>从已创建的容器中更新镜像，并提交镜像</p>
<ul>
<li><p>在运行中的容器中使用 <code>apt-get update</code> 命令更新</p>
</li>
<li><p>更新完成后使用 <code>exit</code> 命令退出容器</p>
</li>
<li><p>使用 <code>docker commit </code> 提交副本容器</p>
</li>
<li><h4 id="docker-commit参数"><a href="#docker-commit参数" class="headerlink" title="docker commit参数"></a>docker commit参数</h4><ul>
<li>-m: 提交的描述信息</li>
<li>-a: 指定镜像作者</li>
<li>容器Id</li>
<li>创建后的目标镜像名</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><ul>
<li>使用<code>docker rmi</code>命令移除本地镜像</li>
<li>删除镜像之前必须用<code>docker rm</code>删除依赖于这个镜像的所有容器</li>
</ul>
<h2 id="Docker-容器"><a href="#Docker-容器" class="headerlink" title="Docker 容器"></a>Docker 容器</h2><p>容器是独立运行的一个或一组应用，以及它们的运行态环境。</p>
<h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><ul>
<li>直接使用<code>docker run</code>新建并启动</li>
<li>利用<code>docker start</code> 命令，将已终止容器启动运行</li>
</ul>
<h3 id="终止容器"><a href="#终止容器" class="headerlink" title="终止容器"></a>终止容器</h3><ul>
<li>使用<code>docker stop</code> 终止一个运行中的容器</li>
<li>当Docker 容器中指定的应用终结时，容器也自动终止（只启动一个终端的容器，通过<code>exit</code>或者<code>Ctrl+d</code>退出终端时，容器立刻终止）</li>
<li>使用<code>docker ps -a </code>命令可以查看到处于终止状态的容器，可以使用<code>docker start</code>启动</li>
</ul>
<h3 id="重启容器"><a href="#重启容器" class="headerlink" title="重启容器"></a>重启容器</h3><ul>
<li>使用<code>docker restart</code> 将一个运行态的容器终止，再重新启动</li>
</ul>
<h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><p>使用<code>-d</code>参数后，容器启动后会进入后台运行，需要进入容器内部操作通过<code>docker attach</code>命令或者<code>nsenter</code>工具等</p>
<ul>
<li>attach 命令<ul>
<li><code>docker attach</code>是Docker 自带命令，使用方式<code>docker attach 容器名</code> </li>
<li>注意 当多个窗口同时 attach 同一个容器时，所有窗口同步显示</li>
</ul>
</li>
<li>exec 命令<ul>
<li>使用 <code>docker exec</code>在运行的容器中执行命令<ul>
<li>**-d :**分离模式: 在后台运行</li>
<li>**-i :**即使没有附加也保持STDIN 打开</li>
<li>**-t :**分配一个伪终端</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="导出容器"><a href="#导出容器" class="headerlink" title="导出容器"></a>导出容器</h3><ul>
<li><p>使用<code>docker export</code> 命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker export CONTAINERID &gt; ***.tar</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="导入容器快照"><a href="#导入容器快照" class="headerlink" title="导入容器快照"></a>导入容器快照</h3><ul>
<li><p>使用<code>docker import</code> 从容器快照文件中再导入为镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat ***.tar | sudo docker import - ***/***:v1.0</span></span><br></pre></td></tr></table></figure></li>
<li><p>或者 通过 指定URL 或者目录导入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">sudo docker import http://example.com/exampleimage.tgz example/imagerepo</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><ul>
<li>使用<code>docker rm</code> 删除处于终止状态的容器</li>
<li>删除运行中容器 添加 <code>-f</code>参数，Docker 会发送 SIGKILL 信号给容器</li>
</ul>
<h2 id="Docker-安装-MinIO-文件服务器"><a href="#Docker-安装-MinIO-文件服务器" class="headerlink" title="Docker 安装 MinIO 文件服务器"></a>Docker 安装 MinIO 文件服务器</h2><ul>
<li><p>使用<code>docker search minio</code> 搜索镜像</p>
</li>
<li><p>使用<code>docker pull docker.io/minio/minio</code> 拉取镜像</p>
</li>
<li><p>启动 docker </p>
<p>MinIO 需要一个持久卷来存储配置和应用数据。可以通过简单地传递一个目录（在下面的示例中为<code>/ data</code>）启动MinIO。这个目录会在容器启动时在容器的文件系统中创建，不过所有的数据都会在容器退出时丢失。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -p 9000:9000 minio/minio server /data</span><br></pre></td></tr></table></figure>

<p>要创建具有永久存储的MinIO容器，需要将本地持久目录从主机操作系统映射到虚拟配置<code>~/.minio</code> 并导出<code>/data</code>目录。 为此，请运行以下命令</p>
<ul>
<li>GNU/Linux 和 macOS</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -p 9000:9000 --name minio1 \</span><br><span class="line">  -v /mnt/data:/data \</span><br><span class="line">  -v /mnt/config:/root/.minio \</span><br><span class="line">  minio/minio server /data</span><br></pre></td></tr></table></figure>

<ul>
<li>Windows</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -p 9000:9000 --name minio1 \</span><br><span class="line">  -v D:\data:/data \</span><br><span class="line">  -v D:\minio\config:/root/.minio \</span><br><span class="line">  minio/minio server /data</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Docker-安装-Nginx-代理服务器"><a href="#Docker-安装-Nginx-代理服务器" class="headerlink" title="Docker 安装 Nginx 代理服务器"></a>Docker 安装 Nginx 代理服务器</h2><ul>
<li><p>拉取镜像 <code> docker push nginx</code></p>
</li>
<li><p>启动容器 <code>docker run -p 80:80 --name nginx -d nginx</code></p>
<ul>
<li>-p 端口映射 将本地80(:前) 端口 映射到容器内部的80端口</li>
<li>-d 设置容器后台在运行 </li>
</ul>
</li>
<li><p>创建目录用于存储 容器里Nginx默认配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p ~/nginx/www ~/nginx/logs ~/nginx/conf</span><br></pre></td></tr></table></figure></li>
<li><p>拷贝容器内 Nginx 默认配置文件到本地当前目录下的 conf 目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker cp CONTAINERID:/etc/nginx/nginx.conf ~/nginx/conf</span><br></pre></td></tr></table></figure></li>
<li><p>部署</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 80:80 --name nginx -v ~/nginx/www:/usr/share/nginx/html -v ~/nginx/conf/nginx.conf:/etc/nginx/nginx.conf -v ~/nginx/logs:/var/log/nginx nginx</span><br></pre></td></tr></table></figure></li>
<li><p>Nginx 热部署</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec CONTAINERID nginx -s reload</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Docker-安装-mysql"><a href="#Docker-安装-mysql" class="headerlink" title="Docker 安装 mysql"></a>Docker 安装 mysql</h2><ul>
<li><p>拉取运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo docker pull mysql:5.7</span><br><span class="line"></span><br><span class="line"># --name指定容器名字 -v目录挂载 -p指定端口映射  -e设置mysql参数 -d后台运行</span><br><span class="line">sudo docker run -p 3306:3306 --name mysql \</span><br><span class="line">-v /mydata/mysql/log:/var/log/mysql \</span><br><span class="line">-v /mydata/mysql/data:/var/lib/mysql \</span><br><span class="line">-v /mydata/mysql/conf:/etc/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=76516051t \</span><br><span class="line">-d mysql:5.7</span><br></pre></td></tr></table></figure></li>
<li><p>进入容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it mysql bash</span><br></pre></td></tr></table></figure></li>
<li><p>配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /mydata/mysql/conf/my.conf </span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysqld]</span><br><span class="line">init_connect=&#x27;SET collation_connection = utf8_unicode_ci&#x27;</span><br><span class="line">init_connect=&#x27;SET NAMES utf8&#x27;</span><br><span class="line">character-set-server=utf8</span><br><span class="line">collation-server=utf8_unicode_ci</span><br><span class="line">skip-character-set-client-handshake</span><br><span class="line">skip-name-resolve</span><br></pre></td></tr></table></figure></li>
<li><p>重启 docker restart mysql</p>
</li>
<li><p>登录数据库</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;76516051t&#x27;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Docker-安装-Nexus3"><a href="#Docker-安装-Nexus3" class="headerlink" title="Docker 安装 Nexus3"></a>Docker 安装 Nexus3</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull sonatype/nexus3</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8081:8081 --name nexus sonatype/nexus3</span><br></pre></td></tr></table></figure>




<h2 id="Docker-安装-Wordpress"><a href="#Docker-安装-Wordpress" class="headerlink" title="Docker 安装 Wordpress"></a>Docker 安装 Wordpress</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -e WORDPRESS_DB_HOST=172.16.12.178:3306 -e WORDPRESS_DB_USER=root -e WORDPRESS_DB_PASSWORD=****** -p 8082:80 --name       wordpress -d wordpress</span><br></pre></td></tr></table></figure>



<h2 id="Docker-安装-Redis"><a href="#Docker-安装-Redis" class="headerlink" title="Docker 安装 Redis"></a>Docker 安装 Redis</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 先在容器外创建好目录结构</span></span><br><span class="line">mkdir -p /mydata/redis/conf</span><br><span class="line">touch /mydata/redis/conf/redis.conf</span><br><span class="line"></span><br><span class="line">docker pull redis</span><br><span class="line"></span><br><span class="line">docker run -p 9007:6379 --name redis \</span><br><span class="line">-v /mydata/redis/data:/data \</span><br><span class="line">-v /mydata/redis/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d redis redis-server /etc/redis/redis.conf</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 直接进去redis客户端。</span></span><br><span class="line">docker exec -it redis redis-cli</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置持久化</span></span><br><span class="line">vim /mydata/redis/conf/redis.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 插入下面内容</span></span><br><span class="line">appendonly yes</span><br><span class="line">requirepass 76516051t</span><br><span class="line"></span><br><span class="line">docker restart redis</span><br></pre></td></tr></table></figure>



<h2 id="Docker-安装-MongoDB"><a href="#Docker-安装-MongoDB" class="headerlink" title="Docker 安装 MongoDB"></a>Docker 安装 MongoDB</h2><ul>
<li>```shell<br>docker run –name mongo -p 27017:27017 -v ~/dockerdata/mongo:/data/db -e MONGO_INITDB_ROOT_USERNAME=admin -e MONGO_INITDB_ROOT_PASSWORD=admin -d mongo<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## Docker 安装 Jenkins</span><br><span class="line"></span><br><span class="line">- ```shell</span><br><span class="line">  docker run  --name jenkins -u root -d   -p 8080:8080   -p 50000:50000   -v jenkins-data:/var/jenkins_home   -v /var/run/docker.sock:/var/run/docker.sock   jenkinsci/blueocean</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="错误问题及解决方式记录"><a href="#错误问题及解决方式记录" class="headerlink" title="错误问题及解决方式记录"></a>错误问题及解决方式记录</h2><ul>
<li><p>错误信息:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">container_linux.go:247: starting container process caused &quot;process_linux.go:258: applying cgroup configuration for process caused \&quot;Cannot set property TasksAccounting, or unknown property.\&quot;&quot;</span><br><span class="line">/usr/bin/docker-current: Error response from daemon: oci runtime error: container_linux.go:247: starting container process caused &quot;process_linux.go:258: applying cgroup configuration for process caused \&quot;Cannot set property TasksAccounting, or unknown property.\&quot;&quot;.</span><br></pre></td></tr></table></figure></li>
<li><p>解决: centos系统版本兼容性问题，如果将系统做更新升级，即可解决</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum update</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="新环境命令"><a href="#新环境命令" class="headerlink" title="新环境命令"></a>新环境命令</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker pull portainer/portainer-ce</span><br><span class="line">docker run -d -p 9000:9000 --name portainer --restart always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>容器云</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Keepalived配置nginx自动重启</title>
    <url>/2021-08-02-keepalived%E9%85%8D%E7%BD%AENginx%E8%87%AA%E5%8A%A8%E9%87%8D%E5%90%AF/</url>
    <content><![CDATA[<h3 id="Keepalived配置nginx自动重启"><a href="#Keepalived配置nginx自动重启" class="headerlink" title="Keepalived配置nginx自动重启"></a>Keepalived配置nginx自动重启</h3><ul>
<li>编写Nginx重启检测脚本 <code>vim /etc/keepalived/check_nginx_alive_or_not.sh</code><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span> </span><br><span class="line"><span class="meta">#</span><span class="bash">判断nginx服务是否启动，如果不存在，调用nginx启用命令，并停止2秒，若<span class="comment">#启动失败，杀掉keepalived</span></span></span><br><span class="line">A=`ps -C nginx --no-header |wc -l`</span><br><span class="line">if [ $A -eq 0 ];then </span><br><span class="line"> /usr/local/nginx/sbin/nginx</span><br><span class="line"> sleep 2</span><br><span class="line"> if [ `ps -C nginx --no-header |wc -l` -eq 0 ];then</span><br><span class="line">  killall keepalived</span><br><span class="line"> fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
<span id="more"></span></li>
<li>配置脚本执行权限<br><code> chmod +x /etc/keepalived/check_nginx_alive_or_not.sh</code></li>
<li>配置keepalived.conf监听nginx脚本<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vrrp_script check_nginx_alive &#123; </span><br><span class="line">    # 脚本位置</span><br><span class="line">	script &quot;/etc/keepalived/check_nginx_alive_or_not.sh&quot; </span><br><span class="line"><span class="meta">	#</span><span class="bash"> 每隔两秒运行上一行脚本</span> </span><br><span class="line">	interval 2</span><br><span class="line"><span class="meta">	#</span><span class="bash"> 如果脚本执行结果为0，并且weight配置的值大于0，则优先级相应的增加</span></span><br><span class="line">    #如果脚本执行结果非0，并且weight配置的值小于0，则优先级相应的减少</span><br><span class="line">	weight 10 </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li>
<li>在 <code>vrrp_instance </code>中新增监控的脚本<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">track_script &#123;</span><br><span class="line"><span class="meta">	#</span><span class="bash"> 追踪 nginx 脚本</span> </span><br><span class="line">	check_nginx_alive </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>重启Keepalived让配置文件生效 <code>systemctl restart keepalived</code></li>
</ul>
]]></content>
      <categories>
        <category>Keepalived</category>
      </categories>
      <tags>
        <tag>keepalived</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx.conf 详解</title>
    <url>/2021-07-27-nginx.conf%20%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="nginx-conf-详解"><a href="#nginx-conf-详解" class="headerlink" title="nginx.conf 详解"></a>nginx.conf 详解</h2><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><ul>
<li>main （全局配置）<ul>
<li>event （配置工作模式以及连接数）</li>
<li>http （http模块相关配置）<ul>
<li>server （虚拟主机配置，可以配置多个虚拟主机）<ul>
<li>location (路由规则)</li>
<li>upstream (集群，内网服务器)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<span id="more"></span>

<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置worker进程的用户，指的linux中的用户，涉及到nginx操作目录或文件的一权限，默认为 nobody</span></span><br><span class="line"><span class="comment">#user  nobody;</span></span><br><span class="line"><span class="comment"># worker进程工作数设置，CPU有几个，就可以设置几个，或者设置为N-1也行</span></span><br><span class="line"><span class="string">worker_processes</span>  <span class="number">1</span><span class="string">;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 错误日志级别 debug | info | notice | warn | error | crit | alert | emerg ，错误级别从左到右越来越大</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pid        logs/nginx.pid;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">events</span> &#123;</span><br><span class="line">    <span class="comment"># 默认使用epoll多路复用IO模型</span></span><br><span class="line">    <span class="string">use</span> <span class="string">epoll;</span></span><br><span class="line">    <span class="comment"># 每个workder允许连接的客户端最大连接数</span></span><br><span class="line">    <span class="string">worker_connections</span>  <span class="number">10240</span><span class="string">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">http</span> &#123;</span><br><span class="line">    <span class="comment"># include 导入外部mime.types（请求类型）文件 </span></span><br><span class="line">    <span class="string">include</span>       <span class="string">mime.types;</span></span><br><span class="line">    <span class="comment"># 配置默认type类型</span></span><br><span class="line">    <span class="string">default_type</span>  <span class="string">application/octet-stream;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># $remote_addr 客户端ip</span></span><br><span class="line">    <span class="comment"># $remote_user 远程客户端用户名，一般为：’-’</span></span><br><span class="line">    <span class="comment"># $time_local 时间和时区</span></span><br><span class="line">    <span class="comment"># $request 请求的url以及method</span></span><br><span class="line">    <span class="comment"># $status 响应状态码</span></span><br><span class="line">    <span class="comment"># $body_bytes_send 响应客户端内容字节数</span></span><br><span class="line">    <span class="comment"># $http_referer 记录用户从哪个链接跳转过来的</span></span><br><span class="line">    <span class="comment"># $http_user_agent 用户所使用的代理，一般来时都是浏览器</span></span><br><span class="line">    <span class="comment"># $http_x_forwarded_for 通过代理服务器来记录客户端的ip</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">    <span class="comment">#                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">    <span class="comment">#                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/access.log  main;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用高效文件传输，提升传输性能。启用后才能使用 tcp_nopush ，是指当数据表累积一定大小后才发送，提高了效率</span></span><br><span class="line">    <span class="string">sendfile</span>        <span class="string">on;</span></span><br><span class="line">    <span class="comment"># tcp_nopush     on;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 设置客户端与服务端请求的超时时间，保证客户端多次请求的时候不会重复建立新的连接，节约资源损耗</span></span><br><span class="line">    <span class="comment"># keepalive_timeout  0;</span></span><br><span class="line">    <span class="string">keepalive_timeout</span>  <span class="number">65</span><span class="string">;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 虚拟主机配置</span></span><br><span class="line">    <span class="string">server</span> &#123;</span><br><span class="line">        <span class="comment"># 监听端口号</span></span><br><span class="line">        <span class="string">listen</span>       <span class="number">80</span><span class="string">;</span></span><br><span class="line">        <span class="comment"># 虚拟主机名称</span></span><br><span class="line">        <span class="comment"># 如果同时匹配多个，按下列1，2，3，4顺序规则确定主机。和server顺序无关</span></span><br><span class="line">        <span class="comment"># 1.精确名称</span></span><br><span class="line">        <span class="comment"># 2.以星号开头最长的通配符名称，例如*.example.org”</span></span><br><span class="line">        <span class="comment"># 3.以星号结尾的最长通配符名称，例如mail.*</span></span><br><span class="line">        <span class="comment"># 4.第一个匹配的正则表达式(按配置文件中配置的顺序)</span></span><br><span class="line">        <span class="string">server_name</span>  <span class="string">localhost;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">#允许跨域请求的域，*代表所有</span></span><br><span class="line">        <span class="string">add_header</span> <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span> <span class="string">*;</span></span><br><span class="line">        <span class="comment">#允许带上cookie请求</span></span><br><span class="line">        <span class="string">add_header</span> <span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span> <span class="string">&#x27;true&#x27;</span><span class="string">;</span></span><br><span class="line">        <span class="comment">#允许请求的方法，比如 GET/POST/PUT/DELETE</span></span><br><span class="line">        <span class="string">add_header</span> <span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span> <span class="string">*;</span></span><br><span class="line">        <span class="comment">#允许请求的header</span></span><br><span class="line">        <span class="string">add_header</span> <span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span> <span class="string">*;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">#对源站点验证</span></span><br><span class="line">        <span class="string">valid_referers</span> <span class="string">*.wangjialun.top;</span></span><br><span class="line">        <span class="comment">#非法引入会进入下方判断</span></span><br><span class="line">        <span class="string">if</span> <span class="string">($invalid_referer)</span> &#123;</span><br><span class="line">            <span class="string">return</span> <span class="number">404</span><span class="string">;</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 路由 </span></span><br><span class="line">        <span class="string">location</span> <span class="string">/</span> &#123;</span><br><span class="line">            <span class="string">root</span>   <span class="string">html;</span></span><br><span class="line">            <span class="string">index</span>  <span class="string">index.html</span> <span class="string">index.htm;</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># expires 浏览器缓存</span></span><br><span class="line">            <span class="string">expires</span> <span class="string">10s;</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 错误页面</span></span><br><span class="line">        <span class="string">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  <span class="string">/50x.html;</span></span><br><span class="line">        <span class="string">location</span> <span class="string">=</span> <span class="string">/50x.html</span> &#123;</span><br><span class="line">            <span class="string">root</span>   <span class="string">html;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 配置上游服务器 默认轮询</span></span><br><span class="line"><span class="string">upstream</span> <span class="string">tomcats</span> &#123;</span><br><span class="line">	<span class="string">server</span> <span class="number">192.168</span><span class="number">.31</span><span class="number">.96</span><span class="string">:8088;</span></span><br><span class="line">	<span class="string">server</span> <span class="number">192.168</span><span class="number">.31</span><span class="number">.226</span><span class="string">:8088;</span></span><br><span class="line">	<span class="string">server</span> <span class="number">192.168</span><span class="number">.31</span><span class="number">.23</span><span class="string">:8088;</span></span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line">    <span class="string">server</span> &#123;</span><br><span class="line">        <span class="string">listen</span>       <span class="number">80</span><span class="string">;</span></span><br><span class="line">        <span class="string">server_name</span>  <span class="string">www.shop.com;</span></span><br><span class="line">        <span class="string">location</span> <span class="string">/</span> &#123;</span><br><span class="line">			<span class="string">proxy_pass</span> <span class="string">http://tomcats;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><ul>
<li><h4 id="路由-root-与-alias-区别"><a href="#路由-root-与-alias-区别" class="headerlink" title="路由 root 与 alias 区别"></a>路由 root 与 alias 区别</h4><p>假如服务器路径为：/home/resource/files/img/face.png root </p>
<ul>
<li>路径完全匹配访问 配置的时候为： <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">location</span> <span class="string">/resource &#123; </span></span><br><span class="line">  	<span class="attr">root</span> <span class="string">/home </span></span><br><span class="line"><span class="meta">&#125;</span> <span class="string"></span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>用户访问的时候请求为： url:port/resource/files/img/face.png </p>
<ul>
<li><p>alias 可以为你的路径做一个别名，对用户透明 配置的时候为： </p>
 <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">location</span> <span class="string">/hello &#123; </span></span><br><span class="line"> 	<span class="attr">alias</span> <span class="string">/home/resource </span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p> 用户访问的时候请求为： url:port/hello/files/img/face.png ，如此相当于为目录 resource 做一个自定义的别名。</p>
</li>
<li><h4 id="Gzip压缩"><a href="#Gzip压缩" class="headerlink" title="Gzip压缩"></a>Gzip压缩</h4><p>开启gzip压缩功能，目的：提高传输效率，节约带宽</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">gzip</span>  <span class="string">on;</span></span><br><span class="line"><span class="comment"># 限制最小压缩，小于1字节文件不会压缩</span></span><br><span class="line"><span class="attr">gzip_min_length</span> <span class="string">1;</span></span><br><span class="line"><span class="comment"># 定义压缩级别(压缩比，文件越大,压缩越多，cpu使用率也会提高)</span></span><br><span class="line"><span class="attr">gzip_comp_level</span> <span class="string">3;</span></span><br><span class="line"><span class="comment"># 定义压缩文件的类型</span></span><br><span class="line"><span class="attr">gzip_types</span> <span class="string">text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;</span></span><br></pre></td></tr></table></figure></li>
<li><h4 id="location-的匹配规则"><a href="#location-的匹配规则" class="headerlink" title="location 的匹配规则"></a>location 的匹配规则</h4><ul>
<li><p><code>空格</code> ：默认匹配，普通匹配 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">	root /home; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li>
<li><p><code>=</code> ：精确匹配 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">location = /resource/img/face1.png &#123;</span><br><span class="line">	root /home; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><code> ~*</code> ：匹配正则表达式，不区分大小写 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">符合图片的显示</span> </span><br><span class="line">location ~* \.(GIF|jpg|png|jpeg) &#123; </span><br><span class="line">	root /home; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li>
<li><p><code>~</code> ：匹配正则表达式，区分大小写</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"> #</span><span class="bash">GIF必须大写才能匹配到</span> </span><br><span class="line">location ~ \.(GIF|jpg|png|jpeg) &#123; </span><br><span class="line">	root /home; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><code>^~</code> ：以某个字符路径开头 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">location ^~ /resource/img &#123;</span><br><span class="line">	root /home; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><h4 id="跨域支持"><a href="#跨域支持" class="headerlink" title="跨域支持"></a>跨域支持</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">允许跨域请求的域，*代表所有</span></span><br><span class="line">add_header &#x27;Access-Control-Allow-Origin&#x27; *;</span><br><span class="line"><span class="meta">#</span><span class="bash">允许带上cookie请求</span></span><br><span class="line">add_header &#x27;Access-Control-Allow-Credentials&#x27; &#x27;true&#x27;;</span><br><span class="line"><span class="meta">#</span><span class="bash">允许请求的方法，比如 GET/POST/PUT/DELETE</span></span><br><span class="line">add_header &#x27;Access-Control-Allow-Methods&#x27; *;</span><br><span class="line"><span class="meta">#</span><span class="bash">允许请求的header</span></span><br><span class="line">add_header &#x27;Access-Control-Allow-Headers&#x27; *;</span><br></pre></td></tr></table></figure></li>
<li><h4 id="防盗链配置支持"><a href="#防盗链配置支持" class="headerlink" title="防盗链配置支持"></a>防盗链配置支持</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">对源站点验证</span></span><br><span class="line">valid_referers *.wangjialun.top;</span><br><span class="line"><span class="meta">#</span><span class="bash">非法引入会进入下方判断</span></span><br><span class="line">if ($invalid_referer) &#123;</span><br><span class="line">	return 404;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><h4 id="upstream-集群配置"><a href="#upstream-集群配置" class="headerlink" title="upstream 集群配置"></a>upstream 集群配置</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">配置上游服务器</span></span><br><span class="line">upstream tomcats &#123;</span><br><span class="line">	server 192.168.31.96:8088 down;</span><br><span class="line">	server 192.168.31.226:8088;</span><br><span class="line">	server 192.168.31.23:8088;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  www.shop.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">			proxy_pass http://tomcats;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h5><table>
<thead>
<tr>
<th>指令</th>
<th align="left">介绍</th>
</tr>
</thead>
<tbody><tr>
<td>weight</td>
<td align="left">默认是1,数值越小，权重越小</td>
</tr>
<tr>
<td>down</td>
<td align="left">用于标记服务节点不可用</td>
</tr>
<tr>
<td>backup</td>
<td align="left">表示当前服务器节点是备用机，只有在其他的服务器都宕机以后，自己才会加入到集群中，被用户访问。不能在 hash 和 random load balancing 中使用。</td>
</tr>
<tr>
<td>max_conns</td>
<td align="left">最大连接数</td>
</tr>
<tr>
<td>max_fails</td>
<td align="left">表示失败几次，则标记server已宕机，剔出上游服务。</td>
</tr>
<tr>
<td>fail_timeout</td>
<td align="left">表示失败的重试时间, 配合max_fails 使用</td>
</tr>
<tr>
<td>slow_start</td>
<td align="left">设置服务器权重从0恢复到标准值的时间</td>
</tr>
</tbody></table>
</li>
<li><h4 id="配置keepalived提供吞吐量"><a href="#配置keepalived提供吞吐量" class="headerlink" title="配置keepalived提供吞吐量"></a>配置keepalived提供吞吐量</h4><ul>
<li><p>keepalived ： 设置长连接处理的数量 </p>
</li>
<li><p>proxy_http_version ：设置长连接http版本为1.1 </p>
</li>
<li><p>proxy_set_header ：清除connection header 信息</p>
</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">upstream</span> <span class="string">tomcats &#123;</span></span><br><span class="line">	<span class="attr">server</span> <span class="string">192.168.31.96:8088;</span></span><br><span class="line">	<span class="attr">server</span> <span class="string">192.168.31.226:8088;</span></span><br><span class="line">	<span class="attr">server</span> <span class="string">192.168.31.23:8088;</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	# 设置长连接处理的数量</span></span><br><span class="line">	<span class="attr">keepalive</span> <span class="string">32;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">server</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">listen</span>       <span class="string">80;</span></span><br><span class="line">        <span class="attr">server_name</span>  <span class="string">www.shop.com;</span></span><br><span class="line">        <span class="attr">location</span> <span class="string">/ &#123;</span></span><br><span class="line">			<span class="attr">proxy_pass</span> <span class="string">http://tomcats;</span></span><br><span class="line"><span class="comment">			# 设置长连接http版本为1.1</span></span><br><span class="line">			<span class="attr">proxy_http_version</span> <span class="string">1.1;</span></span><br><span class="line"><span class="comment">			# 清除connection header 信息</span></span><br><span class="line">			<span class="attr">proxy_set_header</span> <span class="string">Connection &quot;&quot;;</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure></li>
<li><h4 id="ip-hash"><a href="#ip-hash" class="headerlink" title="ip_hash"></a>ip_hash</h4><p>通过客户端请求ip的前三段进行hash求模，再通过hash值选择后端server。<br>当需要某ip一直请求同一台服务器时候，例如分片上传文件场景。<br><strong>注意</strong>： 当需要删除某台服务器时候，使用down，不可以直接删除。<br>​            直接删除hash会重新计算，会导致用户会话，缓存失效等很多问题。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">upstream</span> <span class="string">tomcats &#123;</span></span><br><span class="line">	<span class="attr">ip_hash;</span></span><br><span class="line">	<span class="attr">server</span> <span class="string">192.168.31.96:8088;</span></span><br><span class="line">	<span class="attr">server</span> <span class="string">192.168.31.226:8088;</span></span><br><span class="line">	<span class="attr">server</span> <span class="string">192.168.31.23:8088;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure></li>
<li><h4 id="url-hash-和-least-conn"><a href="#url-hash-和-least-conn" class="headerlink" title="url_hash 和 least_conn"></a>url_hash 和 least_conn</h4><p>根据每次请求的url地址，hash后访问到固定的服务器节点</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">upstream</span> <span class="string">tomcats &#123;</span></span><br><span class="line"><span class="comment">    # url_hash </span></span><br><span class="line">	<span class="attr">hash</span> <span class="string">$request_uri;</span></span><br><span class="line"><span class="comment">	# 最少连接数</span></span><br><span class="line"><span class="comment">	# least_conn</span></span><br><span class="line">	</span><br><span class="line">	<span class="attr">server</span> <span class="string">192.168.31.96:8088;</span></span><br><span class="line">	<span class="attr">server</span> <span class="string">192.168.31.226:8088;</span></span><br><span class="line">	<span class="attr">server</span> <span class="string">192.168.31.23:8088;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure></li>
<li><h4 id="一致性hash"><a href="#一致性hash" class="headerlink" title="一致性hash"></a>一致性hash</h4><p>当某台务器宕机后，hash也会重新计算，导致很多问题。可以配置一致性hash算法<br>理解成一个hash闭环，用户和服务器都hash后落在环上。访问通过顺时针命中最近的服务器，当某台服务器宕机，访问落在下一台上面。不会整个重新hash取模对其他区域造成影响。</p>
<ul>
<li>server_id_ 字段，如果配置id字段，则使用id字段作为server标识，否则使用server ip和端口作为server标识，<ul>
<li>使用id字段可以手动设置server的标识，比如一台机器的ip或者端口变化，id仍然可以表示这台机器。使用id字段</li>
<li>可以减低增减服务器时hash的波动。</li>
</ul>
</li>
<li>server <em>weight</em> 字段，作为server权重，对应虚拟节点数目</li>
<li>具体算法，将每个server虚拟成n个节点，均匀分布到hash环上，每次请求，根据配置的参数计算出一个hash值，在hash环<ul>
<li>上查找离这个hash最近的虚拟节点，对应的server作为该次请求的后端机器。</li>
</ul>
</li>
<li>该模块可以根据配置参数采取不同的方式将请求均匀映射到后端机器，比如：<ul>
<li><code>consistent_hash $remote_addr</code>：可以根据客户端ip映射</li>
<li><code>consistent_hash $request_uri</code>： 根据客户端请求的uri映射</li>
<li><code>consistent_hash $args</code>：根据客户端携带的参数进行映射<br>安装 ngx_http_upstream_consistent_hash  第三方模块：</li>
</ul>
</li>
<li>下载解压 <a href="https://github.com/replay/ngx_http_consistent_hash">https://github.com/replay/ngx_http_consistent_hash</a></li>
<li>添加模块 <code>./configure --add-module=/&#123;目录&#125;/ngx_http_consistent_hash-master</code></li>
<li>make</li>
<li>make install</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">upstream</span> <span class="string">test &#123;</span></span><br><span class="line">	<span class="attr">consistent_hash</span> <span class="string">$request_uri;</span></span><br><span class="line"></span><br><span class="line">	<span class="attr">server</span> <span class="string">192.168.31.96:8088 id=1001 weight=3;</span></span><br><span class="line">	<span class="attr">server</span> <span class="string">192.168.31.226:8088 id=1002 weight=10;</span></span><br><span class="line">	<span class="attr">server</span> <span class="string">192.168.31.23:8088 id=1003 weight=20;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure></li>
<li><h4 id="反向代理缓存"><a href="#反向代理缓存" class="headerlink" title="反向代理缓存"></a>反向代理缓存</h4><p>主要缓存上游的资源文件到nginx中</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置上游服务器</span></span><br><span class="line"><span class="attr">upstream</span> <span class="string">tomcats &#123;</span></span><br><span class="line">	<span class="attr">server</span> <span class="string">192.168.31.96:8088;</span></span><br><span class="line">	<span class="attr">server</span> <span class="string">192.168.31.226:8088;</span></span><br><span class="line">	<span class="attr">server</span> <span class="string">192.168.31.23:8088;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># proxy_cache_path 设置缓存保存的目录</span></span><br><span class="line"><span class="comment"># keys_zone 设置共享内存以及占用空间大小</span></span><br><span class="line"><span class="comment"># max_size 设置缓存大小</span></span><br><span class="line"><span class="comment"># inactive 超过此时间则缓存自动清理</span></span><br><span class="line"><span class="comment"># use_temp_path 临时目录，使用后会影响nginx性能</span></span><br><span class="line"><span class="attr">proxy_cache_path</span> <span class="string">/usr/local/nginx/upstream_cache keys_zone=myNginxCache:5m max_size=1g inactive=30s use_temp_path=off; </span></span><br><span class="line"></span><br><span class="line">    <span class="attr">server</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">listen</span>       <span class="string">80;</span></span><br><span class="line">        <span class="attr">server_name</span>  <span class="string">www.shop.com;</span></span><br><span class="line"><span class="comment">		</span></span><br><span class="line"><span class="comment">		# 开启并使用myNginxCache缓存</span></span><br><span class="line">		<span class="attr">proxy_cache</span> <span class="string">myNginxCache;</span></span><br><span class="line"><span class="comment">		# 针对200 304 状态码的缓存设置过期时间</span></span><br><span class="line">		<span class="attr">proxy_cache_valid</span> <span class="string">200 304 8h;</span></span><br><span class="line">		</span><br><span class="line">        <span class="attr">location</span> <span class="string">/ &#123;</span></span><br><span class="line">			<span class="attr">proxy_pass</span> <span class="string">http://tomcats;</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br></pre></td></tr></table></figure></li>
<li><h4 id="配置HTTPS域名证书"><a href="#配置HTTPS域名证书" class="headerlink" title="配置HTTPS域名证书"></a>配置HTTPS域名证书</h4><ul>
<li>安装SSL模块(通过nginx -V 检查下有没有安装过，安装过则省略)<ul>
<li>新增ssl模块(原来的那些模块需要保留)<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./configure \</span><br><span class="line">--prefix=/usr/local/nginx \</span><br><span class="line">--pid-path=/var/run/nginx/nginx.pid \</span><br><span class="line">--lock-path=/var/lock/nginx.lock \</span><br><span class="line">--error-log-path=/var/log/nginx/error.log \</span><br><span class="line">--http-log-path=/var/log/nginx/access.log \</span><br><span class="line">--with-http_gzip_static_module \</span><br><span class="line">--http-client-body-temp-path=/var/temp/nginx/client \</span><br><span class="line">--http-proxy-temp-path=/var/temp/nginx/proxy \</span><br><span class="line">--http-fastcgi-temp-path=/var/temp/nginx/fastcgi \</span><br><span class="line">--http-uwsgi-temp-path=/var/temp/nginx/uwsgi \</span><br><span class="line">--http-scgi-temp-path=/var/temp/nginx/scgi \</span><br><span class="line">--with-http_ssl_module</span><br></pre></td></tr></table></figure></li>
<li>编译和安装<br><code>make</code><br><code>make install</code></li>
</ul>
</li>
<li>域名证书下载后，解压上传<code>*.crt</code> 和 私钥 <code>*.key</code>到 /usr/local/nginx/conf 目录中</li>
<li>新加一个server监听443的端口<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">	listen 443;</span><br><span class="line">	server_name www.wangjialun.top;</span><br><span class="line"><span class="meta">	</span></span><br><span class="line"><span class="meta">	#</span><span class="bash"> 开启ssl</span></span><br><span class="line">	ssl on;</span><br><span class="line"><span class="meta">	#</span><span class="bash"> 配置ssl证书 同级目录，直接填写相对路径就行</span></span><br><span class="line">	ssl_certificate 1_www.wangjialun.top_bundle.crt;</span><br><span class="line"><span class="meta">	#</span><span class="bash"> 配置证书秘钥</span></span><br><span class="line">	ssl_certificate_key 2_www.wangjialun.top.key;</span><br><span class="line"><span class="meta">	#</span><span class="bash"> ssl会话cache</span></span><br><span class="line">	ssl_session_cache shared:SSL:1m;</span><br><span class="line"><span class="meta">	#</span><span class="bash"> ssl会话超时时间</span></span><br><span class="line">	ssl_session_timeout 5m;</span><br><span class="line"><span class="meta">	#</span><span class="bash"> 配置加密套件，写法遵循 openssl 标准</span></span><br><span class="line">	ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">	ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class="line">	ssl_prefer_server_ciphers on;</span><br><span class="line">	</span><br><span class="line">	location / &#123;</span><br><span class="line">		proxy_pass http://tomcats/;</span><br><span class="line">		index index.html;</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx日志切割</title>
    <url>/2021-07-28-nginx%E6%97%A5%E5%BF%97%E5%88%87%E5%89%B2/</url>
    <content><![CDATA[<h2 id="nginx-日志切割"><a href="#nginx-日志切割" class="headerlink" title="nginx 日志切割"></a>nginx 日志切割</h2><ul>
<li><p>编写脚本 vim cat_nginx_log.sh </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">LOG_PATH=&quot;/var/log/nginx/&quot;</span><br><span class="line">RECORD_TIME=$(date -d &quot;yesterday&quot; +%Y-%m-%d+%H:%M)</span><br><span class="line">PID=/var/run/nginx/nginx.pid</span><br><span class="line">mv $&#123;LOG_PATH&#125;/access.log $&#123;LOG_PATH&#125;/access.$&#123;RECORD_TIME&#125;.log</span><br><span class="line">mv $&#123;LOG_PATH&#125;/error.log $&#123;LOG_PATH&#125;/error.$&#123;RECORD_TIME&#125;.log</span><br><span class="line"><span class="meta">#</span><span class="bash">向Nginx主进程发送信号，用于重新打开日志文件</span></span><br><span class="line">kill -USR1 `cat $PID`</span><br></pre></td></tr></table></figure></li>
</ul>
<span id="more"></span>

<ul>
<li><p>记得<code>chmod +x cat_nginx_log.sh</code>    赋予执行权限</p>
</li>
<li><p>配置cron定时执行</p>
<ul>
<li><p>安装定时任务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install crontabs</span><br></pre></td></tr></table></figure></li>
<li><p><code>crontab -e</code>编辑并添加一行新任务 (cron表达式)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">*/1 * * * * /usr/local/nginx/sbin/cat_nginx_log.sh</span><br></pre></td></tr></table></figure></li>
<li><p>重启定时任务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service crond restart</span><br></pre></td></tr></table></figure></li>
<li><p>定时任务常用命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service crond start //启动服务 </span><br><span class="line">service crond stop //关闭服务 </span><br><span class="line">service crond restart //重启服务 </span><br><span class="line">service crond reload //重新载入配置 </span><br><span class="line">crontab -e // 编辑任务 </span><br><span class="line">crontab -l // 查看任务列表</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>maven相关梳理</title>
    <url>/2019-04-21-maven%E7%9B%B8%E5%85%B3%E6%A2%B3%E7%90%86/</url>
    <content><![CDATA[<p>[TOC]</p>
<span id="more"></span>

<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><pre><code>Maven 是一个项目管理工具，它包含了一个项目对象模 型 (POM：Project Object Model)，一组标准集合，一个项目生命周期(Project Lifecycle)，一个依赖管 理系统(Dependency Management System)，和用来运行定义在生命周期阶段(phase)中插件(plugin)目标 (goal)的逻辑。
</code></pre>
<h3 id="Maven的目录结构"><a href="#Maven的目录结构" class="headerlink" title="Maven的目录结构"></a>Maven的目录结构</h3><p>bin: 存放了 maven 的命令</p>
<p>boot: 存放了一些 maven 本身的引导程序，如类加载器等 </p>
<p>conf: 存放了 maven 的一些配置文件，如 setting.xml 文件 </p>
<p>lib: 存放了 maven 本身运行所需的一些 jar 包 </p>
<h3 id="仓库种类"><a href="#仓库种类" class="headerlink" title="仓库种类"></a>仓库种类</h3><ul>
<li>本地仓库 ：用来存储从远程仓库或中央仓库下载的插件和 jar 包，项目使用一些插件或 jar 包， 优先从本地仓库查找  </li>
<li>远程仓库(私服)：如果本地需要插件或者 jar 包，本地仓库没有，默认去远程仓库下载。 远程仓库可以在互联网内也可以在局域网内。</li>
<li> 中央仓库 ：在 maven 软件中内置一个远程仓库地址 <a href="http://repo1.maven.org/maven2">http://repo1.maven.org/maven2</a> ，它是中央仓库，服务于整个互联网，它是由 Maven 团队自己维护，里面存储了非常全的 jar 包，它包含了世界上大部分流行的开源项目构件</li>
</ul>
<h2 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h2><pre><code>maven 工程中不直接将 jar 包导入到工程中，而是通过在 pom.xml 文件中添加所需 jar 包的坐标，这样就很好的避免了 jar 直接引入进来，在需要用到 jar 包的时候，只要查找 pom.xml 文 件，再通过 pom.xml 文件中的坐标，到一个专门用于”存放 jar 包的仓库”(maven 仓库)中根据坐标从 而找到这些 jar 包，再把这些 jar 包拿去运行。 
</code></pre>
<h3 id="Maven-项目目录结构"><a href="#Maven-项目目录结构" class="headerlink" title="Maven 项目目录结构"></a>Maven 项目目录结构</h3><ul>
<li>src/main/java: 存放项目的.java 文件 </li>
<li>src/main/resource: 存放项目资源文件，如 spring配置文件 </li>
<li>src/test/java: 存放所有单元测试.java 文件，如 JUnit 测试类</li>
<li>src/test/resource: 测试资源文件</li>
<li>target: 项目输出位置，编译后的class 文件会输出到此目录 </li>
<li>pom.xml: maven 项目核心配置文件 </li>
</ul>
<h2 id="Maven的常用命令"><a href="#Maven的常用命令" class="headerlink" title="Maven的常用命令"></a>Maven的常用命令</h2><ul>
<li><strong>clean</strong> : 清理命令, 执行 clean 会删除 target 目录及内容</li>
<li><strong>validate</strong> : 验证命令, 验证项目是正确的, 所有必要的信息可用</li>
<li><strong>compile</strong> : 编译命令，作用是将 src/main/java 下的文件编译为 class 文件输出到 target 目录下</li>
<li><strong>test</strong> : 测试命令, 会执行src/test/java下的单元测试类。 </li>
<li><strong>package</strong> : 打包命令, 根据pom.xml配置对于 java 工程执行 package 打成 jar 包，对于web 工程打成war 包</li>
<li><strong>verify</strong> : 校验命令, 运行任何检查以验证包是否有效并符合质量标准</li>
<li><strong>install</strong> : 安装命令, 执行 install 将 maven 打成 jar 包或 war 包发布到本地仓库</li>
<li><strong>site</strong> : 站点命令, 生成项目的站点文档</li>
<li><strong>deploy</strong> : 部署命令, 在集成或发布环境中完成, 将最终软件包复制到远程存储库中</li>
</ul>
<h2 id="Maven的生命周期"><a href="#Maven的生命周期" class="headerlink" title="Maven的生命周期"></a>Maven的生命周期</h2><ul>
<li>清理生命周期(clean) : <ul>
<li>预清洁(pre-clean): 执行实际项目清理之前所需流程</li>
<li><strong>清洁(clean)</strong>  : 删除以前构建生成的所有文件</li>
<li>后清洁(post-clean): 执行完成项目清理所需的流程</li>
</ul>
</li>
<li>默认生命周期(default): <ul>
<li><strong>验证(validate)</strong> : 验证项目是正确的, 所有必要的信息可用</li>
<li>初始化(initialize): 初始化构建状态, 例如设置属性或创建目录</li>
<li>产生来源(generate-sources): 生成包含在编译中的任何源代码</li>
<li>流程源(process-sources): 处理源代码, 例如过滤任何值</li>
<li>生成资源(generate-resources): 生成包含在包中的资源</li>
<li>流程资源(process- resource): 将资源复制并处理到目标目录中, 准备打包</li>
<li><strong>编译(compile)</strong> : 编译项目的源代码</li>
<li>工艺类(process-classes): 从编译后处理生成的文件, 例如对Java类进行字节码增强</li>
<li>生成测试来源(generate-test-sources): 生成包含在编译中的任何测试源代码</li>
<li>流程测试来源(process-test-sources): 处理测试源代码, 例如过滤任何值</li>
<li>生成测试资源(generate-test-resources): 创建测试资源</li>
<li>流程测试资源(process-test-resources): 将资源复制并处理到测试目标目录中</li>
<li>测试编译(test-compile): 将测试源代码编译到测试目标目录中</li>
<li>流程检验类(process-test-classes): 从测试编译中处理生成的文件, 例如对Java类进行字节码增强</li>
<li><strong>测试(test)</strong> : 使用合适的单元测试框架运行测试, 这些测试不应该要去代码被打败或者部署</li>
<li>制备包(prepare-package): 在实际打包之前, 执行必要的准备包装的操作</li>
<li><strong>打包(package)</strong> : 采取编译的代码, 打包成可分发的格式(jar, war)</li>
<li>预集成测试(pre-integration-test): 在之前集成测试之前执行所需的操作, 涉及设置所需环境</li>
<li>集成测试(integration-test): 如果需要, 可以将该包执行并部署到可以运行集成测试的环境中</li>
<li>整合后的测试(post-integration-test): 执行集成测试后执行所需操作, 例如清理环境</li>
<li><strong>校验(verify)</strong> : 运行任何检查以验证包是否有效并符合质量标准</li>
<li><strong>安装(install)</strong> : 将软件包安装到本地存储库中，以作为本地其他项目的依赖关系</li>
<li><strong>部署(deploy)</strong> : 在集成或发布环境中完成, 将最终软件包复制到远程存储库中, 方便与其他开发人员共享项目</li>
</ul>
</li>
<li>站点生命周期(site)<ul>
<li>预网站(pre-site): 在实际的项目现场生成之前执行所需的进程</li>
<li><strong>网站(site)</strong> : 生成项目的站点文档</li>
<li>后网站(post-site): 执行完成站点生成所需的进程, 并准备站点部署</li>
<li>网站部署(site-deploy): 将生成的站点文档部署到指定的Web服务器</li>
</ul>
</li>
</ul>
<h2 id="Maven-概念模型"><a href="#Maven-概念模型" class="headerlink" title="Maven 概念模型"></a>Maven 概念模型</h2><ul>
<li><p>项目对象模型 POM (Project Object Mode)</p>
<ul>
<li>一个maven工程 就有一个pom.xml文件, 通过pom.xml文件定义项目的坐标, 项目依赖, </li>
</ul>
</li>
<li><p>项目生命周期(Project Lifecycle)</p>
</li>
<li><p>依赖管理系统(Dependency Management System)</p>
<ul>
<li>通过 maven 的依赖管理对项目所依赖的 jar 包进行统一管理。</li>
</ul>
</li>
<li><p>一组标准集合</p>
<ul>
<li><p>maven 将整个项目管理过程定义一组标准 , 比如: 通过maven 构建工程有标准的目录结构</p>
<p>, 标准的生命周期阶段, 依赖管理有标准的坐标定义等</p>
</li>
</ul>
</li>
<li><p>运行定义在生命周期阶段(phase)中插件目标(goal)的逻辑</p>
</li>
</ul>
<h2 id="坐标"><a href="#坐标" class="headerlink" title="坐标"></a>坐标</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--项目名称，定义为组织名+项目名，类似包名--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 模块名称 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 当前项目版本号，snapshot 为快照版本即非正式版本，release为正式发布版本 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 依赖范围 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>依赖范围<ul>
<li><strong>compile</strong> : 编译范围, 指 A在编译时依赖 B，此范围为默认依赖范围。编译范围的依赖会用在 编译、测试、运行，由于运行时需要所以编译范围的依赖会被打包</li>
<li><strong>provided</strong> : provided 依赖只有在当JDK 或者一个容器已经提供该依赖之后才使用,provided 依 赖在编译和测试时需要，在运行时不需要，比如：servlet api 被 tomcat 容器提供。 </li>
<li><strong>runtime</strong>: runtime 依赖在运行和测试系统的时候需要, 在编译时候不需要, 例如JDBC的驱动包,由于运行时需要所以runtime范围的依赖会被打包</li>
<li><strong>test</strong>: test 范围依赖 在编译和运行时都不需要, 它们只有再测试编译和测试运行阶段可用, 比如junit, 由于运行时不需要所以test范围依赖不会被打包</li>
<li><strong>system</strong>: system范围依赖与 provided类似, 但是必须显示的提供一个对于本地系统中JAR文件的路径, 需要指定systemPath 磁盘路径, system依赖不推荐使用</li>
</ul>
</li>
<li>依赖范围强-&gt;弱顺序: compile &gt; provided &gt; runtime &gt; test</li>
<li>依赖建议<ul>
<li>默认引入的jar包 – compile (默认范围, 可以不写) （编译、测试、运行 都有效 ） </li>
<li>servlet-api, jsp-api – provided (编译,测试有效 运行时无效以防和tomcat冲突)</li>
<li>jdbc驱动jar包 – runtime(测试, 运行 有效)</li>
<li>junit – test(测试有效)</li>
</ul>
</li>
</ul>
<h2 id="pom-基本配置"><a href="#pom-基本配置" class="headerlink" title="pom 基本配置"></a>pom 基本配置</h2><p>pom.xml 是 Maven 项目的核心配置文件，位于每个工程的根目录</p>
<ul>
<li><project > ：文件的根节点 . </li>
<li><modelversion > ： pom.xml 使用的对象模型版本 </li>
<li><groupId > ：项目名称，一般写项目的域名</li>
<li><artifactId > ：模块名称，子项目名或模块名称 </li>
<li><version > ：产品的版本号 .   </li>
<li><packaging > ：打包类型，一般有 jar、war、pom 等 </li>
<li><name > ：项目的显示名，常用于 Maven 生成的文档。</li>
<li><description > ：项目描述，常用于 Maven 生成的文档</li>
<li><dependencies> ：项目依赖构件配置，配置项目依赖构件的坐标</li>
<li><dependencyManagement> 锁定jar包版本不会引入jar包,  防止其他项目引用jar包直接依赖覆盖掉</li>
<li><build> ：项目构建配置，配置编译、运行插件等。 </li>
</ul>
<h2 id="pom-解决jar冲突方式"><a href="#pom-解决jar冲突方式" class="headerlink" title="pom 解决jar冲突方式"></a>pom 解决jar冲突方式</h2><h3 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h3><ul>
<li>直接依赖: 项目中直接导入的jar包, 就是该项目的直接依赖包</li>
<li>传递依赖: 项目中没有直接导入的jar包, 可以通过项目直接依赖jar包传递到项目中</li>
</ul>
<h3 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h3><ul>
<li><p>第一声明优先原则: 先声明的jar包坐标依赖, 可以优先进入项目中</p>
<pre><code>即&lt;dependencies&gt; 中靠上的坐标优先引入
</code></pre>
</li>
<li><p>路径近者优先原则: 直接依赖路径比传递依赖路径近,</p>
<pre><code> 最终项目依赖jar包是路径近的依赖
</code></pre>
</li>
<li><p>直接排除法: 使用<exclusions> 排除jar包下面的依赖包</p>
</li>
</ul>
<h2 id="Maven-私服-nexus"><a href="#Maven-私服-nexus" class="headerlink" title="Maven 私服(nexus)"></a>Maven 私服(nexus)</h2><h3 id="nexus-properties"><a href="#nexus-properties" class="headerlink" title="nexus.properties"></a>nexus.properties</h3><ul>
<li>application-port: nexus 的访问端口配置 </li>
<li>application-host: nexus主机监听配置</li>
<li>nexus-webapp: nexus工程目录</li>
<li>nexus-webapp-context-path: nexus的web访问路径</li>
<li>nexus-work: nexus仓库目录</li>
<li>runtime: nexus运行程序目录</li>
</ul>
<h3 id="nexus-仓库类型"><a href="#nexus-仓库类型" class="headerlink" title="nexus 仓库类型"></a>nexus 仓库类型</h3><ul>
<li><p><strong>hosted</strong> : 宿主仓库, 部署自己的jar 到这个类型的仓库, 包括releases 和 snapshot两部分</p>
<p>, Releases 公司内部发布版本仓库, Snapshots 公司内部测试版本仓库</p>
</li>
<li><p><strong>proxy</strong> : 代理仓库, 用于代理远程的公共仓库, 如maven 中央仓库, 用户连接私服, 私服自动去</p>
<p>中央仓库下载 jar 或插件</p>
</li>
<li><p><strong>group</strong> : 仓库组, 用来合并多个hosted/proxy 仓库, 通常配置自己的maven连接仓库组</p>
</li>
<li><p><strong>virtual</strong> : 虚拟, 兼容Maven1版本的jar或插件</p>
</li>
</ul>
<h3 id="nexus-初始仓库"><a href="#nexus-初始仓库" class="headerlink" title="nexus 初始仓库"></a>nexus 初始仓库</h3><ul>
<li><p><strong>central</strong> : 代理仓库, 代理中央仓库</p>
</li>
<li><p><strong>apache-snapshots</strong>: 代理仓库</p>
<p>存储snapshots 构件, 代理地址 <a href="https://repository.apache.org/snapshots/">https://repository.apache.org/snapshots/</a></p>
</li>
<li><p><strong>central-m1</strong>: virtual类型仓库, 兼容Maven1版本的jar或者插件</p>
</li>
<li><p><strong>releases</strong>: 本地仓库, 存储 releases 构件</p>
</li>
<li><p><strong>snapshots</strong>: 本地仓库, 存储 snapshots 构件</p>
</li>
<li><p><strong>thirdparty</strong>: 第三方仓库</p>
</li>
</ul>
<h3 id="maven-配置-nexus"><a href="#maven-配置-nexus" class="headerlink" title="maven 配置 nexus"></a>maven 配置 nexus</h3><ul>
<li><p>修改maven中setting的<server></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>私服上传</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">id</span>&gt;</span>releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/repositories/releases/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">id</span>&gt;</span>snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/repositories/snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>setting.xml中配置仓库</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--profile 的 id--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--仓库 id，repositories 可以配置多个仓库，保证 id 不重复--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--仓库地址，即 nexus 仓库组的地址--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--是否下载 releases 构件--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--是否下载 snapshots 构件--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  插件仓库，maven 的运行依赖插件，也需要从私服下载插件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--  插件仓库的 id 不允许重复，如果重复后边配置会覆盖前边 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>public<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>Public Repositories<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>激活</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 激活dev --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activeProfiles</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>安装第三方jar包到本地仓库</p>
<ul>
<li>打开cmd直接运行</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn install:install-file -DgroupId=com.alibaba -DartifactId=fastjson -Dversion=1.1.37 -Dpackaging=jar -Dfile=D:\jar\fastjson-1.1.37.jar</span><br></pre></td></tr></table></figure></li>
<li><p>安装第三方jar包到私服</p>
<ul>
<li> 在setting中配置登录私服第三方登录信息</li>
</ul>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>thirdparty<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>打开cmd直接运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn deploy:deploy-file -DgroupId=com.alibaba -DartifactId=fastjson -Dversion=1.1.37 -Dpackaging=jar -Dfile=D:\jar\fastjson-1.1.37.jar -Durl=http://localhost:8081/nexus/content/repositories/thirdparty/ -DrepositoryId=thirdparty</span><br></pre></td></tr></table></figure></li>
<li><p>参数说明</p>
<ul>
<li>DgroupId 和 DartifactId 构成该jar包在pom.xml的坐标</li>
<li>Dfile 表示需要上传jar包的绝对路径</li>
<li>Durl 私服上仓库的位置, 打开 nexus -&gt;repositories 菜单可以看到该路径</li>
<li>DrepositoryId 服务器的表示id, 在 nexus的configuration中可以看到</li>
<li>Dversion 表示版本信息</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>maven</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>redis 主从复制（读写分离）</title>
    <url>/2021-08-07-redis%20%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%EF%BC%88%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB%EF%BC%89/</url>
    <content><![CDATA[<h1 id="redis-主从复制（读写分离）"><a href="#redis-主从复制（读写分离）" class="headerlink" title="redis 主从复制（读写分离）"></a><strong>redis 主从复制（读写分离）</strong></h1><ul>
<li><p>将一台Redis服务器的数据，复制到其他的Redis服务器。前者称为主节点(master)，后者称为从节点(slave)；数据的复制是单向的，只能由主节点到从节点。</p>
</li>
<li><p>默认情况下，每台Redis服务器都是主节点；且一个主节点可以有多个从节点(或没有从节点)，但一个从节点只能有一个主节点。</p>
<p>主从之间数据复制存在消耗，建议一主两从就可以了。</p>
</li>
</ul>
<h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ul>
<li><p>负载均衡</p>
<p>在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务（即写Redis数据时应用连接主节点，读Redis数据时应用连接从节点），分担服务器负载；尤其是在写少读多的场景下，通过多个从节点分担读负载，可以提高Redis服务器的并发量。</p>
</li>
<li><p>数据的热备份</p>
<p>主节点会把数据复制给从节点。</p>
</li>
<li><p>故障恢复</p>
<p>主节点宕机时可以由从节点提供服务</p>
</li>
</ul>
<span id="more"></span>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>​    主节点不需要修改配置文件，进入redis命令行输入<code>info replication</code>可以查看当前从节点信息</p>
<p>​    从节点服务器修改redis.conf配置</p>
   <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置master节点的ip和端口号</span></span><br><span class="line"><span class="comment"># replicaof &lt;masterip&gt; &lt;masterport&gt; </span></span><br><span class="line"><span class="attr">replicaof</span> <span class="string">192.168.31.96 6379</span></span><br><span class="line"><span class="comment"># master节点的密码</span></span><br><span class="line"><span class="comment"># masterauth &lt;master-password&gt;</span></span><br><span class="line"><span class="attr">masterauth</span> <span class="string">wangjialun</span></span><br><span class="line"><span class="comment"># 配置为只读状态，不能进行set操作</span></span><br><span class="line"><span class="meta">replica-read-only</span> <span class="string">yes</span></span><br></pre></td></tr></table></figure>

<p>​    从节点配置完成后重启，进入redis命令行执行<code>info replication</code>可以查看当前主节点信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:192.168.31.96</span><br><span class="line">master_port:6379</span><br><span class="line">master_link_status:up</span><br></pre></td></tr></table></figure>

<p>  主节点 执行<code>info replication</code>也可以实时看到当前所有的子节点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Replication</span><br><span class="line">role:master</span><br><span class="line">connected_slaves:2</span><br><span class="line">slave0:ip=192.168.31.52,port=6379,state=online,offset=23602,lag=0</span><br><span class="line">slave1:ip=192.168.31.121,port=6379,state=online,offset=23602,lag=0</span><br><span class="line">master_failover_state:no-failover</span><br></pre></td></tr></table></figure>

<p>此时测试主节点发送的数据变化，都会同步复制到从节点上面。</p>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>redis 三主三从集群模式</title>
    <url>/2021-08-10-redis%20%E4%B8%89%E4%B8%BB%E4%B8%89%E4%BB%8E%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="Redis-三主三从集群模式"><a href="#Redis-三主三从集群模式" class="headerlink" title="Redis 三主三从集群模式"></a><strong>Redis 三主三从集群模式</strong></h2><p>redis单机安装参照之前的 <a href="https://www.wangjialun.top/2021-08-03-centos7%20%E5%AE%89%E8%A3%85%20redis/">centos7安装redis</a> </p>
<p>安装完成后在<code>redis.conf</code>修改配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开启集群模式</span></span><br><span class="line"><span class="meta">cluster-enabled</span> <span class="string">yes</span></span><br><span class="line"><span class="comment"># 每个集群节点都有一个集群配置文件。它是由Redis节点自动创建和更新的。每个Redis集群节点都需要一个不同的集群配置文件。</span></span><br><span class="line"><span class="comment"># 注：确保在同一系统中运行的实例没有重叠的集群配置文件名。集群的配置,配置文件首次启动自动生成。</span></span><br><span class="line"><span class="meta">cluster-config-file</span> <span class="string">nodes-6379.conf</span></span><br><span class="line"><span class="comment"># 超时时间，超时则认为master宕机，随后主备切换</span></span><br><span class="line"><span class="meta">cluster-node-timeout</span> <span class="string">5000</span></span><br><span class="line"><span class="comment"># 开启AOF</span></span><br><span class="line"><span class="attr">appendonly</span> <span class="string">yes</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>启动6台redis节点,启动报错就删除清空rdb,appendonly等文件再试.</p>
<p>创建集群(注意: <strong>redis3.</strong> *版本需要用<code>redis-trib.rb</code>构建集群, 之后版本不用)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># 创建集群，主节点和从节点比例为<span class="number">1</span>，<span class="number">1</span>-<span class="number">3</span>为主，<span class="number">4</span>-<span class="number">6</span>为从，<span class="number">1</span>和<span class="number">4</span>，<span class="number">2</span>和<span class="number">5</span>，<span class="number">3</span>和<span class="number">6</span>分别对应为主从关系</span><br><span class="line">redis-cli  --cluster create <span class="number">192.168</span><span class="number">.31</span><span class="number">.161</span>:<span class="number">6379</span> <span class="number">192.168</span><span class="number">.31</span><span class="number">.187</span>:<span class="number">6379</span> <span class="number">192.168</span><span class="number">.31</span><span class="number">.202</span>:<span class="number">6379</span> <span class="number">192.168</span><span class="number">.31</span><span class="number">.172</span>:<span class="number">6379</span> <span class="number">192.168</span><span class="number">.31</span><span class="number">.25</span>:<span class="number">6379</span> <span class="number">192.168</span><span class="number">.31</span><span class="number">.188</span>:<span class="number">6379</span> --cluster-replicas <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>检查集群信息 (check任意一个节点)</p>
<p><code>redis-cli --cluster check 192.168.31.161:6379 </code></p>
<p>集群模式<code>redis-cli</code> 添加 -c -h -p 指令</p>
<p><code>redis-cli -c  -h 192.168.31.161 -p 6379</code></p>
<p>集群模式下的客户端命令</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">cluster</span> <span class="string">info ：打印集群的信息</span></span><br><span class="line"><span class="attr">cluster</span> <span class="string">nodes ：列出集群当前已知的所有节点（ node），以及这些节点的相关信息。</span></span><br><span class="line"></span><br><span class="line"><span class="attr">cluster</span> <span class="string">meet &lt;ip&gt; &lt;port&gt; ：将 ip 和 port 所指定的节点添加到集群当中，让它成为集群的一份子。</span></span><br><span class="line"><span class="attr">cluster</span> <span class="string">forget &lt;node_id&gt; ：从集群中移除 node_id 指定的节点。</span></span><br><span class="line"><span class="attr">cluster</span> <span class="string">replicate &lt;node_id&gt; ：将当前节点设置为 node_id 指定的节点的从节点。</span></span><br><span class="line"><span class="attr">cluster</span> <span class="string">saveconfig ：将节点的配置文件保存到硬盘里面。</span></span><br><span class="line"></span><br><span class="line"><span class="attr">cluster</span> <span class="string">addslots &lt;slot&gt; [slot ...] ：将一个或多个槽（ slot）指派（ assign）给当前节点。</span></span><br><span class="line"><span class="attr">cluster</span> <span class="string">delslots &lt;slot&gt; [slot ...] ：移除一个或多个槽对当前节点的指派。</span></span><br><span class="line"><span class="attr">cluster</span> <span class="string">flushslots ：移除指派给当前节点的所有槽，让当前节点变成一个没有指派任何槽的节点。</span></span><br><span class="line"><span class="attr">cluster</span> <span class="string">setslot &lt;slot&gt; node &lt;node_id&gt; ：将槽 slot 指派给 node_id 指定的节点，如果槽已经指派给另一个节点，那么先让另一个节点删除该槽&gt;，然后再进行指派。</span></span><br><span class="line"><span class="attr">cluster</span> <span class="string">setslot &lt;slot&gt; migrating &lt;node_id&gt; ：将本节点的槽 slot 迁移到 node_id 指定的节点中。</span></span><br><span class="line"><span class="attr">cluster</span> <span class="string">setslot &lt;slot&gt; importing &lt;node_id&gt; ：从 node_id 指定的节点中导入槽 slot 到本节点。</span></span><br><span class="line"><span class="attr">cluster</span> <span class="string">setslot &lt;slot&gt; stable ：取消对槽 slot 的导入（ import）或者迁移（ migrate）。</span></span><br><span class="line"></span><br><span class="line"><span class="attr">cluster</span> <span class="string">keyslot &lt;key&gt; ：计算键 key 应该被放置在哪个槽上。</span></span><br><span class="line"><span class="attr">cluster</span> <span class="string">countkeysinslot &lt;slot&gt; ：返回槽 slot 目前包含的键值对数量。</span></span><br><span class="line"><span class="attr">cluster</span> <span class="string">getkeysinslot &lt;slot&gt; &lt;count&gt; ：返回 count 个 slot 槽中的键</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>redis 哨兵机制实现</title>
    <url>/2021-08-10-redis%20%E5%93%A8%E5%85%B5%E6%9C%BA%E5%88%B6%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="Redis-哨兵-sentinel-模式实现"><a href="#Redis-哨兵-sentinel-模式实现" class="headerlink" title="Redis 哨兵(sentinel)模式实现"></a><strong>Redis 哨兵(sentinel)模式实现</strong></h2><p>之前搭建的<a href="https://www.wangjialun.top/2021-08-07-redis%20%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%EF%BC%88%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB%EF%BC%89/">主从复制(读写分离)</a>在主节点宕机后，从节点依然可以提供数据读，但是不能进行数据写操作。</p>
<p>需要手动将某个从节点切换成主节点才行，哨兵模式就是解决这个手动操作的问题。</p>
<p>当一个集群中的master失效之后，<strong>sentinel</strong>可以选举出一个新的master继续工作，然后通过发布订阅模式通知其他从服务器，修改配置切换主节点。</p>
<h3 id="核心配置-sentinel-conf"><a href="#核心配置-sentinel-conf" class="headerlink" title="核心配置 sentinel.conf"></a>核心配置 <strong>sentinel.conf</strong></h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 保护模式</span></span><br><span class="line"><span class="meta">protected-mode</span> <span class="string">no</span></span><br><span class="line"><span class="comment"># 配置端口</span></span><br><span class="line"><span class="attr">port</span> <span class="string">26379</span></span><br><span class="line"><span class="comment"># 以守护进程模式启动（后台运行）</span></span><br><span class="line"><span class="attr">daemonize</span> <span class="string">yes</span></span><br><span class="line"><span class="comment"># 日志文件</span></span><br><span class="line"><span class="attr">logfile</span> <span class="string">/usr/local/redis/sentinel/redis-sentinel.log</span></span><br><span class="line"><span class="comment"># 工作目录</span></span><br><span class="line"><span class="attr">dir</span> <span class="string">/usr/local/redis/sentinel/</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 配置哨兵</span></span><br><span class="line"><span class="attr">sentinel</span> <span class="string">monitor mymaster 192.168.14.101 6379 2</span></span><br><span class="line"><span class="comment"># 密码</span></span><br><span class="line"><span class="attr">sentinel</span> <span class="string">auth-pass mymaster wangjialun</span></span><br><span class="line"><span class="comment"># master被sentinel认定为失效的间隔时间</span></span><br><span class="line"><span class="attr">sentinel</span> <span class="string">down-after-milliseconds mymaster 30000</span></span><br><span class="line"><span class="comment"># 剩余的slaves重新和新的master做同步的并行个数</span></span><br><span class="line"><span class="attr">sentinel</span> <span class="string">parallel-syncs mymaster 1</span></span><br><span class="line"><span class="comment"># 故障转移开始，三分钟内没有完成，则认为转移失败</span></span><br><span class="line"><span class="attr">sentinel</span> <span class="string">failover-timeout mymaster 180000</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>拷贝<code>sentinel.conf</code>到所有主从服务器上，通过<code>redis-sentinel sentinel.conf</code>启动哨兵</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Redis version=6.2.5, bits=64, commit=00000000, modified=0, pid=128938, just started</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Configuration loaded</span></span><br><span class="line">* Increased maximum number of open files to 10032 (it was originally set to 1024).</span><br><span class="line">* monotonic clock: POSIX clock_gettime</span><br><span class="line">* Running mode=sentinel, port=26379.</span><br><span class="line"><span class="meta">#</span><span class="bash"> WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is <span class="built_in">set</span> to the lower value of 128.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Sentinel ID is 60b579cb201e522a1da2670954ac2b04a02cb93a</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> +monitor master mymaster 192.168.31.96 6379 quorum 2</span></span><br><span class="line">* +slave slave 192.168.31.52:6379 192.168.31.52 6379 @ mymaster 192.168.31.96 6379</span><br><span class="line">* +slave slave 192.168.31.121:6379 192.168.31.121 6379 @ mymaster 192.168.31.96 6379</span><br><span class="line">* +sentinel sentinel 5a74e74ccc9b908a351ba415baee32f3ec94bcaa 192.168.31.96 26379 @ mymaster 192.168.31.96 6379</span><br><span class="line">* +sentinel sentinel 6b0ea393a9d4e6c55e71829aef86c60d48a52c36 192.168.31.121 26379 @ mymaster 192.168.31.96 6379</span><br></pre></td></tr></table></figure>

<p>查看日志<code>redis-sentinel.log</code>可以看到已经监测到了我的一个<code>master</code>和两个<code>slave</code>redis节点。以及两个<code>sentinel</code>哨兵。</p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>关闭<code>master</code>节点的redis服务, 查看<code>redis-sentinel.log</code></p>
<p>可以进入<code>redis-cli</code>通过<code>info replication</code>查看当前节点状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> +sdown master mymaster 192.168.31.96 6379</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> +new-epoch 1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> +vote-for-leader 6b0ea393a9d4e6c55e71829aef86c60d48a52c36 1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> +odown master mymaster 192.168.31.96 6379 <span class="comment">#quorum 3/2</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Next failover delay: I will not start a failover before Tue Aug 10 01:49:49 2021</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> +config-update-from sentinel 6b0ea393a9d4e6c55e71829aef86c60d48a52c36 192.168.31.121 26379 @ mymaster 192.168.31.96 6379</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> +switch-master mymaster 192.168.31.96 6379 192.168.31.121 6379</span></span><br><span class="line">* +slave slave 192.168.31.52:6379 192.168.31.52 6379 @ mymaster 192.168.31.121 6379</span><br><span class="line">* +slave slave 192.168.31.96:6379 192.168.31.96 6379 @ mymaster 192.168.31.121 6379</span><br></pre></td></tr></table></figure>

<p>sentinel监测到了<code>master</code>节点的故障状态，并从<code>slave</code>节点中选举了一个新的<code>master</code>节点出来，</p>
<p>通知其他的<code>slave</code>节点切换<code>master</code>节点。</p>
<p>当之前故障的<code>master</code>恢复后，发现自己变成了<code>slave</code>节点。注意<code>info replication</code>可能会发现<code>master_link_status:down</code>显示主节点down的状态，是因为没有配置主节点密码导致。需要修改自己的<code>redis.conf</code>中的<code>masterauth</code></p>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>redis 缓存过期处理与内存淘汰机制</title>
    <url>/2021-08-10-redis%20%E7%BC%93%E5%AD%98%E8%BF%87%E6%9C%9F%E5%A4%84%E7%90%86%E4%B8%8E%E5%86%85%E5%AD%98%E6%B7%98%E6%B1%B0%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h2 id="Redis-缓存过期处理与内存淘汰机制"><a href="#Redis-缓存过期处理与内存淘汰机制" class="headerlink" title="Redis 缓存过期处理与内存淘汰机制"></a><strong>Redis 缓存过期处理与内存淘汰机制</strong></h2><h3 id="缓存过期处理"><a href="#缓存过期处理" class="headerlink" title="缓存过期处理"></a>缓存过期处理</h3><ul>
<li><p>（主动）定时删除</p>
<p>定时随机的检查过期的key，如果过期则清理删除。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认每秒钟10次，把这个设置的越大意味着占用的CPU也就越多</span></span><br><span class="line"><span class="attr">hz</span> <span class="string">10</span></span><br></pre></td></tr></table></figure></li>
<li><p>（被动）惰性删除</p>
<p>当客户端请求一个已经过期的key的时候，那么redis会检查这个key是否过期，如果过期了，则删除，然后返回一个nil。这种策略对 CPU 比较友好，不会有太多的损耗，但是内存占用会比较高。</p>
</li>
</ul>
<span id="more"></span>

<h3 id="内存淘汰机制"><a href="#内存淘汰机制" class="headerlink" title="内存淘汰机制"></a>内存淘汰机制</h3><ul>
<li><p>maxmemory ：当内存已使用率到达配置值，则开始清理缓存</p>
<p>如果没有设置maxmemory，将导致Redis在达到堆限制时以内存不足异常终止。</p>
<p>在设置了maxmemory之后，当内存使用达到maxmemory时，Redis将使用maxmemory-policy指定的策略对缓存进行删除。</p>
   <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当内存已使用值达到 maxmemory，开始清理缓存 </span></span><br><span class="line"><span class="comment"># 单位：bytes（字节），123000000Byte ≈ 117.3M</span></span><br><span class="line"><span class="attr">maxmemory</span> <span class="string">123000000</span></span><br><span class="line">  </span><br><span class="line"><span class="meta">maxmemory-policy</span> <span class="string">缓存淘汰策略值枚举：</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment"># volatile开头的策略针对设置了过期时间的key</span></span><br><span class="line"><span class="comment"># allkeys开头的策略针对内存中所有的key</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment"># noeviction：旧缓存永不过期，新缓存设置不了，返回错误</span></span><br><span class="line"><span class="comment"># allkeys-lru：清除最少用的旧缓存，然后保存新的缓存（推荐使用）</span></span><br><span class="line"><span class="comment"># allkeys-random：在所有的缓存中随机删除（不推荐）</span></span><br><span class="line"><span class="comment"># volatile-lru：在那些设置了expire过期时间的缓存中，清除最少用的旧缓存，然后保存新的缓存</span></span><br><span class="line"><span class="comment"># volatile-random：在那些设置了expire过期时间的缓存中，随机删除缓存</span></span><br><span class="line"><span class="meta">*</span> <span class="string">volatile-ttl：在那些设置了expire过期时间的缓存中，删除即将过期的</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>redis 持久化机制</title>
    <url>/2021-08-07-redis%20%E6%8C%81%E4%B9%85%E5%8C%96%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h1 id="redis-持久化机制"><a href="#redis-持久化机制" class="headerlink" title="redis 持久化机制"></a><strong>redis 持久化机制</strong></h1><h2 id="RDB-Redis-DataBase"><a href="#RDB-Redis-DataBase" class="headerlink" title="RDB(Redis DataBase)"></a>RDB(Redis DataBase)</h2><ul>
<li><p><strong>特点</strong></p>
<p>通过配置触发条件或者手动触发将内存中数据写入到磁盘的临时文件中，作为快照存储。恢复时候把快照读进内存</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 核心配置</span></span><br><span class="line"><span class="comment"># 900秒（15分钟）内至少1个key值改变（则进行数据库保存--持久化）  </span></span><br><span class="line"><span class="comment"># 300秒（5分钟）内至少10个key值改变（则进行数据库保存--持久化）  </span></span><br><span class="line"><span class="comment"># 60秒（1分钟）内至少10000个key值改变（则进行数据库保存--持久化）  </span></span><br><span class="line"><span class="attr">save</span> <span class="string">900 1  </span></span><br><span class="line"><span class="attr">save</span> <span class="string">300 10  </span></span><br><span class="line"><span class="attr">save</span> <span class="string">60 10000 </span></span><br><span class="line"><span class="comment"># 保存快照失败时,redis停止接受更新操作（例如持久化时候发现磁盘满了，不能再存储。redis会报错起到提示作用）</span></span><br><span class="line"><span class="meta">stop-writes-on-bgsave-error</span> <span class="string">yes</span></span><br><span class="line"><span class="comment"># 导出数据库的文件名称  </span></span><br><span class="line"><span class="attr">dbfilename</span> <span class="string">dump.rdb</span></span><br><span class="line"><span class="comment"># 配置工作目录 dir /usr/local/redis/workspace</span></span><br><span class="line"><span class="attr">dir</span> <span class="string">./</span></span><br><span class="line"><span class="comment"># 开启rdb压缩模式</span></span><br><span class="line"><span class="attr">rdbcompression</span> <span class="string">yes</span></span><br></pre></td></tr></table></figure>

<p>手动触发 <code>bgsave</code></p>
<span id="more"></span></li>
<li><p>优劣</p>
<ul>
<li>优<ol>
<li>每隔一段时间备份，全量备份 </li>
<li>灾备简单，可以远程传输 </li>
<li>子进程备份的时候，主进程不会有任何IO操作（不会有写入修改或删除），保证备份数据的的完整性 </li>
<li>相对AOF来说，当有更大文件的时候可以快速重启恢复</li>
</ol>
</li>
<li>劣<ol>
<li>发生故障是，有可能会丢失最后一次的备份数据</li>
<li>子进程所占用的内存比会和父进程一模一样，会造成CPU负担</li>
<li>由于定时全量备份是重量级操作，所以对于实时备份，就无法处理了。</li>
</ol>
</li>
</ul>
</li>
</ul>
<h2 id="AOF-Append-Only-File"><a href="#AOF-Append-Only-File" class="headerlink" title="AOF(Append Only File)"></a>AOF(Append Only File)</h2><ul>
<li><p>通过日志追加的方式记录用户请求的写指令。恢复时候读取文件再执行一遍恢复。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># AOF 默认关闭，yes可以开启</span></span><br><span class="line"><span class="attr">appendonly</span> <span class="string">no</span></span><br><span class="line"><span class="comment"># AOF 的文件名</span></span><br><span class="line"><span class="attr">appendfilename</span> <span class="string">&quot;appendonly.aof&quot;</span></span><br><span class="line"><span class="comment"># no：不同步</span></span><br><span class="line"><span class="comment"># everysec：每秒备份，推荐使用</span></span><br><span class="line"><span class="comment"># always：每次操作都会备份，安全并且数据完整，但是慢性能差</span></span><br><span class="line"><span class="attr">appendfsync</span> <span class="string">everysec</span></span><br><span class="line"><span class="comment"># 重写的时候是否要同步，no可以保证数据安全</span></span><br><span class="line"><span class="meta">no-appendfsync-on-rewrite</span> <span class="string">no</span></span><br><span class="line"><span class="comment"># 重写机制：避免文件越来越大，自动优化压缩指令，会fork一个新的进程去完成重写动作，新进程里的内存数据会被重写，此时</span></span><br><span class="line"><span class="comment"># 当前AOF文件的大小是上次AOF大小的100% 并且文件体积达到64m，满足两者则触发重写</span></span><br><span class="line"><span class="meta">auto-aof-rewrite-percentage</span> <span class="string">100</span></span><br><span class="line"><span class="meta">auto-aof-rewrite-min-size</span> <span class="string">64mb</span></span><br></pre></td></tr></table></figure></li>
<li><p>优劣</p>
<ul>
<li><p>优</p>
<ol>
<li><p>AOF更加耐用，可以以秒级别为单位备份，如果发生问题，也只会丢失最后一秒的数据，增加了可靠性和数据完整性。</p>
</li>
<li><p> 以log日志形式追加，如果磁盘满了，会执行 redis-check-aof 工具</p>
</li>
<li><p>当数据太大的时候，redis可以在后台自动重写AOF。当redis继续把日志追加到老的文件中去。</p>
</li>
<li><p>AOF 日志包含的所有写操作，会更加便于redis的解析恢复。<br>（ps： 当出现类似<code>FLUSHALL</code>这种悲剧情况时，立刻停掉redis编辑AOF文件删掉这行命令还能恢复回来）</p>
</li>
</ol>
</li>
<li><p>劣</p>
<ol>
<li>相同的数据下，AOF文件比RDB大</li>
<li>对比RDB的故障恢复相对复杂缓慢，会存在异常的AOF文件情况</li>
</ol>
</li>
</ul>
</li>
</ul>
<h2 id="个人思考"><a href="#个人思考" class="headerlink" title="个人思考"></a>个人思考</h2><ul>
<li>默认是开启使用RDB模式持久化的，不想使用RDB就把<code>save &quot;&quot;</code></li>
<li>如果只用redis做缓存的话，可以把持久化关闭</li>
<li>如果实际场景可以接受 丢失一段缓存可以试用RDB模式，不能则使用AOF</li>
<li>如果要使用redis持久化，且数据很重要的话。可以RDB和AOF同时开启</li>
</ul>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>redis五种数据类型</title>
    <url>/2021-08-03-redis%E4%BA%94%E7%A7%8D%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="redis五种数据类型常用命令"><a href="#redis五种数据类型常用命令" class="headerlink" title="redis五种数据类型常用命令"></a><strong>redis五种数据类型常用命令</strong></h2><ul>
<li><code>keys *</code>：查看所有的key (生产环境慎用，有性能影响) </li>
<li><code>type key</code>：key的类型</li>
<li><code>select index</code>：切换数据库，总共默认16个 </li>
<li><code>flushdb</code>：删除当前db中的数据 </li>
<li><code>flushall</code>：删除所有db中的数据</li>
</ul>
<span id="more"></span>

<h3 id="String"><a href="#String" class="headerlink" title="String"></a><strong>String</strong></h3><p>最简单的字符串类型键值对缓存</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>get/set/del</td>
<td>查询/设置/删除</td>
</tr>
<tr>
<td>set rekey data</td>
<td>设置已经存在的key，会覆盖</td>
</tr>
<tr>
<td>setnx rekey data</td>
<td>设置已经存在的key，不会覆盖</td>
</tr>
<tr>
<td>set key value ex time</td>
<td>设置带过期时间的数据</td>
</tr>
<tr>
<td>expire key</td>
<td>设置过期时间</td>
</tr>
<tr>
<td>ttl</td>
<td>查看剩余时间，-1永不过期，-2过期</td>
</tr>
<tr>
<td>append key</td>
<td>拼接字符串</td>
</tr>
<tr>
<td>strlen key</td>
<td>字符串长度</td>
</tr>
<tr>
<td>incr key</td>
<td>累加1</td>
</tr>
<tr>
<td>decr key</td>
<td>累减1</td>
</tr>
<tr>
<td>incrby key num</td>
<td>累加给定数值</td>
</tr>
<tr>
<td>decrby key num</td>
<td>累减给定数值</td>
</tr>
<tr>
<td>getrange key start end</td>
<td>截取数据，end=-1 代表到最后</td>
</tr>
<tr>
<td>setrange key start newdata</td>
<td>从start位置开始替换数据</td>
</tr>
<tr>
<td>mset</td>
<td>连续设值</td>
</tr>
<tr>
<td>mget</td>
<td>连续取值</td>
</tr>
<tr>
<td>msetnx</td>
<td>连续设值 ，如果存在则不设值</td>
</tr>
</tbody></table>
<h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a><strong>hash</strong></h3><p>类似map，存储结构化数据结构，比如存储一个对象（不能有嵌套对象）</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>hset user name aaa</td>
<td>创建一个user对象，这个对象中包含name属性，name值为aaa</td>
</tr>
<tr>
<td>hget user name</td>
<td>获得用户对象中name的值</td>
</tr>
<tr>
<td>hset user age 18 sex man</td>
<td>设置对象中的多个键值对</td>
</tr>
<tr>
<td>hmsetnx user age 18 sex man</td>
<td>设置对象中的多个键值对，存在则不添加</td>
</tr>
<tr>
<td>hmget user age sex</td>
<td>获得对象中的多个属性</td>
</tr>
<tr>
<td>hgetall user</td>
<td>获得整个对象的内容</td>
</tr>
<tr>
<td>hincrby user age 2</td>
<td>累加属性</td>
</tr>
<tr>
<td>hincrbyfloat user age 2.2</td>
<td>累加属性</td>
</tr>
<tr>
<td>hlen user</td>
<td>有多少个属性</td>
</tr>
<tr>
<td>hexists user age</td>
<td>判断属性是否存在</td>
</tr>
<tr>
<td>hkeys user</td>
<td>获得所有属性</td>
</tr>
<tr>
<td>hvals user</td>
<td>获得所有值</td>
</tr>
<tr>
<td>hdel user</td>
<td>删除对象</td>
</tr>
</tbody></table>
<h3 id="list"><a href="#list" class="headerlink" title="list"></a><strong>list</strong></h3><p>列表</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>lpush userList 1 2 3 4 5</td>
<td>构建一个list，从左边开始存入数据</td>
</tr>
<tr>
<td>rpush userList 1 2 3 4 5</td>
<td>构建一个list，从右边开始存入数据</td>
</tr>
<tr>
<td>lrange list start end</td>
<td>获取数据</td>
</tr>
<tr>
<td>lpop</td>
<td>从左侧开始拿出一个数据</td>
</tr>
<tr>
<td>rpop</td>
<td>从右侧开始拿出一个数据</td>
</tr>
<tr>
<td>llen list</td>
<td>list长度</td>
</tr>
<tr>
<td>lindex list index</td>
<td>获取list下标的值</td>
</tr>
<tr>
<td>lset list index value</td>
<td>把某个下标的值替换</td>
</tr>
<tr>
<td>linsert list before/after value</td>
<td>插入一个新的值</td>
</tr>
<tr>
<td>lrem list num value</td>
<td>删除几个相同数据</td>
</tr>
<tr>
<td>ltrim list start end</td>
<td>截取值，替换原来的list</td>
</tr>
</tbody></table>
<h3 id="set"><a href="#set" class="headerlink" title="set"></a><strong>set</strong></h3><p>理解成无重复元素存在的集合</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>sadd map1 item</td>
<td>添加数据</td>
</tr>
<tr>
<td>scard map1</td>
<td>查看set数据中存在的元素个数</td>
</tr>
<tr>
<td>sismember map1 item</td>
<td>判断set数据中是否存在某个元素</td>
</tr>
<tr>
<td>srem map1 item</td>
<td>删除某个set数据中的元素</td>
</tr>
</tbody></table>
<h3 id="zset-sorted-set"><a href="#zset-sorted-set" class="headerlink" title="zset(sorted set)"></a><strong>zset(sorted set)</strong></h3><p>排序的set，可以去重可以排序, 每个元素都会关联一个整数值或双精度浮点数的分数作为权重，通过权重将元素从小到大排列</p>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>URL请求流程和ip addr解读</title>
    <url>/2019-07-11-url%E8%AF%B7%E6%B1%82%E6%B5%81%E7%A8%8B%E4%BB%A5%E5%8F%8Aipaddr%E8%A7%A3%E8%AF%BB/</url>
    <content><![CDATA[<h2 id="发起一次URL请求流程"><a href="#发起一次URL请求流程" class="headerlink" title="发起一次URL请求流程"></a>发起一次URL请求流程</h2><ol>
<li>在浏览器输入URL <code>http://wangjialun.top/</code></li>
<li>浏览器通过DNS或者HTTPDNS去查找IP地址</li>
<li>知道目标地址后,浏览器会将请求打包,普通请求使用HTTP协议或者使用HTTPS加密传输</li>
<li>DNS,HTTP,HTTPS所在的层为应用层,经过应用层封装后,浏览器会通过socket编程将应用层的包交给下一层传输层</li>
<li>传输层有两种协议,一种无连接的协议UDP,一种面向连接的协议TCP,TCP协议会保证这个包能够到达目的地,如果不能到达会重新发送</li>
<li>TCP协议里面会有两个端口,一个是浏览器监听的端口,一个应用服务器监听的端口,操作系统一般通过端口来判断,得到的包交给哪个进程</li>
<li>传输层封装完毕后,浏览器会将包交给操作系统的网络层,网络层协议是IP协议,在IP协议中会有源IP地址,即浏览器所在机器IP地址和目标IP地址</li>
<li>操作系统知道目标IP后会通过CIDR进行判断,是否在局域网内,如果不在局域网内会获取DHCP或者手动配置的网关IP地址,通过ARP协议获取到MAC地址</li>
<li>操作系统接着将IP包交给下一层MAC层,网卡再将包发出去,因为包里面有MAC地址,所以可以到达网关</li>
<li>网关收到包以后,会根据路由表判断下一步怎么走,类似一个路由器通过OSPF和BGP路由协议获取到目标IP所在的MAC地址,网络包过关后通过这个MAC地址找到目标服务器</li>
<li>目标服务器校验MAC地址一致,取下MAC头,发送给操作系统的网络层,发现IP一致后取下IP头,IP头里面写上一层封装的TCP协议,然后交给传输层TCP,TCP对于收到的每个包都有一个回复的包说明收到了(注意这个不是请求的结果),回复沿路返回</li>
<li>网络包到达TCP层后,TCP头里面有目标端口号,通过这个端口号找到服务器监听这个端口的进程,将网络包发给这个进程应用</li>
</ol>
<h2 id="ip-addr-解读"><a href="#ip-addr-解读" class="headerlink" title="ip addr 解读"></a>ip addr 解读</h2><pre><code>1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1
link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
inet 127.0.0.1/8 scope host lo
   valid_lft forever preferred_lft forever
2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
link/ether 00:16:3e:0c:3b:19 brd ff:ff:ff:ff:ff:ff
inet 172.16.12.178/18 brd 172.16.63.255 scope global dynamic eth0
   valid_lft 301621714sec preferred_lft 301621714sec
</code></pre>
<ul>
<li><p>IP 地址后面有个scope eth0 这张网卡是 global 说明 eth0 这种网卡可以对外,可以接收来自各个地方的包,</p>
<p>lo 的后面是host,说明这张网卡仅可以本机相互通信</p>
<ul>
<li>lo 全称是loopback,又叫环回接口,通常被分配为127.0.0.1,这个地址用于本机通信,经过内核处理后直接返回,不在任何网络中出现</li>
</ul>
</li>
<li><p>MAC地址</p>
<ul>
<li>IP地址的上一行是 link/ether 00:16:3e:0c:3b:19 brd ff:ff:ff:ff:ff:ff ,这个地址是MAC地址,是网卡的物理地址,用十六进制,6个byte表示,MAC地址是唯一标识,具有一定的通信范围,局限在一个子网里面</li>
</ul>
</li>
<li><p>网络设备的状态标识<code>&lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; </code>(net_device flags)</p>
<ul>
<li>UP 表示网卡处于启动状态</li>
<li>BROADCAST 表示这个网卡有广播地址,可以发送广播包</li>
<li>MULTICAST 表示网卡可以发送多播包</li>
<li>LOWER_UP 表示 L1 是启动的,即网线插着</li>
<li>MTU 1500 是指最大传输单元MTU为1500,这是以太网的默认值</li>
<li>qdisc pfifo_fast 全称 queueing discipline(排队规则), 内核如果需要通过某个网络接口发送数据包,都需要为这个接口配置qdisc(排队规则)把数据包加入队列<ul>
<li>最简单的 qdisc 是 pfifo, 不对进入的数据包做任何处理,数据包采用先入先出方式通过队列</li>
<li>pfifo_fast 的队列包含 三个波段(band).在每个波段中使用先进先出规则,三个波段的优先级也不同,band 0 的优先级最高 band 2 的最低, 如果band 0 里面也数据包, 系统不会处理band 1 里面的数据包,band 1 和 band 2 之间也一样, 数据包按照服务类型(Type of Service, TOS) 被分配到多个波段(band)里面,TOS 是 IP头里面的一个字段, 代表当前的包是高优先级还是低优先级的</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>word转pdf的几种方法</title>
    <url>/2021-08-18-word%E8%BD%ACpdf%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h3 id="word转pdf的几种方法"><a href="#word转pdf的几种方法" class="headerlink" title="word转pdf的几种方法"></a>word转pdf的几种方法</h3><p>需求是实现将word转换成pdf在线预览, 试了几种方法发现样式效果最好的是<code>aspose-words</code>,但是需要破解, 附带了激活码</p>
<ul>
<li><h3 id="openOffice-与-libreOffice"><a href="#openOffice-与-libreOffice" class="headerlink" title="openOffice 与 libreOffice"></a>openOffice 与 libreOffice</h3><p>两款都是运行在服务器上面的office处理软件, 通过命令行的方式去执行转换命令</p>
<ul>
<li><a href="https://www.openoffice.org/download/index.html">openOffice下载地址</a> </li>
<li><a href="https://zh-cn.libreoffice.org/download/libreoffice/">libreOffice下载地址</a></li>
</ul>
<p>下载安装好之后需要在代码中引入jodconverter相关jar包依赖(jodconverter.zip解压后lib下的都需要引入)</p>
<p>相关软件及jar下载链接：<a href="https://pan.baidu.com/s/1u0U5jYYAjWRYO7mL5ilD8Q">https://pan.baidu.com/s/1u0U5jYYAjWRYO7mL5ilD8Q</a>  提取码：8888 </p>
<span id="more"></span>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// openOffice 和 libreOffice 差不多除了命令不一样</span></span><br><span class="line"><span class="comment">// 1.执行系统命令启动openoffice线程</span></span><br><span class="line"><span class="comment">// 2.连接openoffice服务连接</span></span><br><span class="line"><span class="comment">// 3.执行转换</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// window 使用  调用openoffice服务线程  </span></span><br><span class="line">String command = <span class="string">&quot;C:/Program Files (x86)/OpenOffice 4/program/soffice-headless -accept=\&quot;socket,host=127.0.0.1,port=8100;urp;\&quot;&quot;</span>;</span><br><span class="line"><span class="comment">// Linux使用</span></span><br><span class="line"><span class="comment">// String command = &quot;/opt/openoffice4/program/soffice -headless -accept=\&quot;socket,host=127.0.0.1,port=8100;urp; -nofirststartwizard\&quot;&quot;;</span></span><br><span class="line">Process p = Runtime.getRuntime().exec(command);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接openoffice服务</span></span><br><span class="line">OpenOfficeConnection connection = <span class="keyword">new</span> SocketOpenOfficeConnection(</span><br><span class="line">    <span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8100</span>);</span><br><span class="line">connection.connect();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转换word到pdf</span></span><br><span class="line">DocumentConverter converter = <span class="keyword">new</span> OpenOfficeDocumentConverter(</span><br><span class="line">    connection);</span><br><span class="line">converter.convert(<span class="keyword">new</span> File(<span class="string">&quot;/temp/1.doc&quot;</span>), <span class="keyword">new</span> File(<span class="string">&quot;/temp/1.pdf&quot;</span>));</span><br><span class="line"></span><br><span class="line">connection.disconnect();</span><br><span class="line">p.destroy();</span><br></pre></td></tr></table></figure>

<ul>
<li>如果出现中文乱码问题, 确定一下服务器上缺不缺中文字体</li>
</ul>
<p>ps: 试了大部分的word都能转换pdf, 有一些样式复杂的会渲染不出来, 直接把word源码生成pdf</p>
</li>
<li><h3 id="spire-doc-free"><a href="#spire-doc-free" class="headerlink" title="spire.doc.free"></a>spire.doc.free</h3><p>免费版的有页数限制, 我的场景不会有多页的就直接用的免费版本</p>
<p>效果可以参照<code>https://smallpdf.com/cn/word-to-pdf</code>, <code>https://www.freepdfconvert.com/zh-cn/word-to-pdf</code>这些在线转换网站,我试了生成的效果和这些网站的一样.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spire.doc.free 相关依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>e-iceblue<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spire.doc.free<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>com.e-iceblue<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://repo.e-iceblue.cn/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>代码相当简单…</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.spire.doc.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordtoPDF</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 加载word示例文档</span></span><br><span class="line">        Document document = <span class="keyword">new</span> Document();</span><br><span class="line">        document.loadFromFile(<span class="string">&quot;D:\\2.doc&quot;</span>);</span><br><span class="line">        <span class="comment">// 保存结果文件</span></span><br><span class="line">        document.saveToFile(<span class="string">&quot;D:\\3.pdf&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ps: 我生成的最后换行不一致, 所以没选用这个</p>
</li>
<li><h3 id="aspose-words-推荐"><a href="#aspose-words-推荐" class="headerlink" title="aspose-words(推荐)"></a>aspose-words(推荐)</h3><p>效果可以参照迅捷pdf在线转换器<code>https://app.xunjiepdf.com/pdf2word/</code></p>
<p>需要引入<code>aspose-words-15.8.0-jdk16.jar</code>到项目中</p>
<p>链接：<a href="https://pan.baidu.com/s/1q06E0wK13dC2ejDbDtdpZQ">https://pan.baidu.com/s/1q06E0wK13dC2ejDbDtdpZQ</a><br>提取码：8888 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 下载后放项目lib下通过system引用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aspose<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspose-words<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>15.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>$&#123;project.basedir&#125;/lib/aspose-words-15.8.0-jdk16.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>核心代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.aspose.words.Document;</span><br><span class="line"><span class="keyword">import</span> com.aspose.words.License;</span><br><span class="line"><span class="keyword">import</span> com.aspose.words.SaveFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordPdfUtil</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> license = <span class="keyword">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// license.xml放在src/main/resources文件夹下</span></span><br><span class="line">            InputStream is = WordPdfUtil.class.getClassLoader().getResourceAsStream(<span class="string">&quot;license.xml&quot;</span>);</span><br><span class="line">            License aposeLic = <span class="keyword">new</span> License();</span><br><span class="line">            aposeLic.setLicense(is);</span><br><span class="line">            license = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            license = <span class="keyword">false</span>;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doc2pdf</span><span class="params">(String wordPath, String pdfPath)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 验证License 若不验证则转化出的pdf文档会有水印产生</span></span><br><span class="line">        <span class="keyword">if</span> (!license) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;License验证不通过...&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            File file = <span class="keyword">new</span> File(pdfPath);</span><br><span class="line">            FileOutputStream os = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">            Document doc = <span class="keyword">new</span> Document(wordPath);</span><br><span class="line">            <span class="comment">// 支持DOC, DOCX, OOXML, RTF HTML, OpenDocument, PDF, EPUB, XPS, SWF 相互转换</span></span><br><span class="line">            doc.save(os, SaveFormat.PDF);</span><br><span class="line">            os.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        doc2pdf(<span class="string">&quot;D:\\3.doc&quot;</span>,<span class="string">&quot;D:\\5.pdf&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在src/main/resources文件夹下创建license.xml填充下面内容激活</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">License</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Products</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Product</span>&gt;</span>Aspose.Total for Java<span class="tag">&lt;/<span class="name">Product</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Product</span>&gt;</span>Aspose.Words for Java<span class="tag">&lt;/<span class="name">Product</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Products</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">EditionType</span>&gt;</span>Enterprise<span class="tag">&lt;/<span class="name">EditionType</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">SubscriptionExpiry</span>&gt;</span>20991231<span class="tag">&lt;/<span class="name">SubscriptionExpiry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">LicenseExpiry</span>&gt;</span>20991231<span class="tag">&lt;/<span class="name">LicenseExpiry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">SerialNumber</span>&gt;</span>8bfe198c-7f0c-4ef8-8ff0-acc3237bf0d7<span class="tag">&lt;/<span class="name">SerialNumber</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Data</span>&gt;</span> <span class="tag">&lt;<span class="name">Signature</span>&gt;</span>sNLLKGMUdF0r8O1kKilWAGdgfs2BvJb/2Xp8p5iuDVfZXmhppo+d0Ran1P9TKdjV4ABwAgKXxJ3jcQTqE/2IRfqwnPf8itN8aFZlV3TJPYeD3yWE7IT55Gz6EijUpC7aKeoohTb4w2fpox58wWoF3SNp6sK6jDfiAUGEHYJ9pjU=<span class="tag">&lt;/<span class="name">Signature</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">License</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><h3 id="file-online-preview"><a href="#file-online-preview" class="headerlink" title="file-online-preview"></a>file-online-preview</h3><p>github上面找到的一个开源项目, 活跃度比较高也记录一下. 目前试了效果没有<code>aspose-words</code>好用, 底层是集成的<code>LibreOffice</code>.</p>
<p>项目地址: <code>https://github.com/kekingcn/kkFileView</code></p>
<p>支持的类型比较多,后续如果有需求,方便二次开发</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>MariaDB</title>
    <url>/2021-07-27-%E5%9C%A8Linux%E4%B8%8A%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AEMariaDB/</url>
    <content><![CDATA[<h1 id="在Linux上安装及配置MariaDB"><a href="#在Linux上安装及配置MariaDB" class="headerlink" title="在Linux上安装及配置MariaDB"></a>在Linux上安装及配置MariaDB</h1><h3 id="安装MariaDB"><a href="#安装MariaDB" class="headerlink" title="安装MariaDB"></a>安装MariaDB</h3><p>1.切换到root用户，首先执行<code>rpm -qa | grep -i mysql</code>检查一下是否有已安装的与MySQL相关的东西，如果有，使用<code>rpm -e --nodeps mysql*</code>进行强制卸载</p>
<p>2.使用yum安装MariaDB，执行<code>yum -y install mariadb mariadb-server</code></p>
<p>3.安装完成后，执行<code>systemctl start mariadb</code> 启动MariaDB，执行<code>systemctl enable mariadb</code>设置开机启动</p>
<span id="more"></span>

<h3 id="配置MariaDB"><a href="#配置MariaDB" class="headerlink" title="配置MariaDB"></a>配置MariaDB</h3><p>1.执行<code>mysql_secure_installation</code>进行相关配置<br>- 首先是设置密码，会提示先输入密码:<br>* Enter current password for root (enter for none):&lt;–初次运行直接回车<br>- 设置密码<br>* Set root password? [Y/n] &lt;– 是否设置root用户密码，输入y并回车或直接回车<br>* New password: &lt;– 设置root用户的密码<br>* Re-enter new password: &lt;– 再输入一次你设置的密码<br>- 其它配置<br>* Remove anonymous users? [Y/n] &lt;– 是否删除匿名用户，回车<br>* Disallow root login remotely? [Y/n] &lt;–是否禁止root远程登录,回车,<br>* Remove test database and access to it? [Y/n] &lt;– 是否删除test数据库，回车<br>* Reload privilege tables now? [Y/n] &lt;– 是否重新加载权限表，回车</p>
<p>2.配置完成后，执行<code>mysql -uroot -ppassword</code>测试登录。其中root为要登录的用户名，password为刚才设置的root用户的密码</p>
<p>3.测试成功后，配置MariaDB的字符集- 使用vi编辑器打开/etc/my.cnf，在[mysqld]中添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">init_connect=&#x27;SET collation_connection = utf8_unicode_ci&#x27;</span><br><span class="line">init_connect=&#x27;SET NAMES utf8&#x27;</span><br><span class="line">character-set-server=utf8</span><br><span class="line">collation-server=utf8_unicode_ci</span><br><span class="line">skip-character-set-client-handshake</span><br></pre></td></tr></table></figure>

<ul>
<li>使用vi编辑器打开/etc/my.cnf.d/client.cnf，在[client]中添加<br><code>default-character-set=utf8</code></li>
<li>使用vi编辑器打开/etc/my.cnf.d/mysql-clients.cnf，在[mysql]中添加<br><code>default-character-set=utf8</code></li>
<li>全部保存后，进入到MariaDB控制台，查看字符集<br><code>show variables like &quot;%character%&quot;;show variables like &quot;%collation%&quot;;</code><br>全部显示UTF-8则配置成功</li>
</ul>
<h3 id="配置MariaDB远程连接"><a href="#配置MariaDB远程连接" class="headerlink" title="配置MariaDB远程连接"></a>配置MariaDB远程连接</h3><p>进入到MariaDB控制台<br>1.执行如下语句建立用户并赋予所有操作权限。<br><code>CREATE USER &#39;username&#39;@&#39;host&#39; IDENTIFIED BY &#39;password&#39;;</code></p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>username</td>
<td>将要创建的用户名</td>
</tr>
<tr>
<td>host</td>
<td>指定该用户在哪个主机上可以登陆，如果是本地用户可用localhost，如果想让该用户可以从任意远程主机登陆，可以使用通配符%</td>
</tr>
<tr>
<td>password</td>
<td>该用户的登陆密码，密码可以为空，如果为空则该用户可以不需要密码登陆服务器</td>
</tr>
</tbody></table>
<p>2.给用户赋予远程登录权限<br><code>GRANT privileges ON databasename.tablename TO &#39;username&#39;@&#39;host&#39;</code></p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>privileges</td>
<td>用户的操作权限，如SELECT , INSERT , UPDATE 等（权限列表见文末）。如果要授予所的权限则使用ALL</td>
</tr>
<tr>
<td>databasename</td>
<td>数据库名</td>
</tr>
<tr>
<td>tablename</td>
<td>表名，如果要授予该用户对所有数据库和表的相应操作权限则可用<em>表示，如</em>.*</td>
</tr>
</tbody></table>
<p>3.修改完成后在MariaDB控制台执行<code>FLUSH PRIVILEGES</code>刷新配置权限使其生效</p>
<p>此时即可通过ip远程访问主机上的MariaDB了。</p>
<p>若仍不能访问，可进行以下检查：<br>1.查看/etc/my.cnf，如<strong>skip-networking</strong>、<strong>bind-address（或bindaddress）</strong>被配置，则需要将这两个参数注释掉。</p>
<blockquote>
<p>skip-networking 这个参数，会导致所有TCP/IP端口没有被监听,也就是说除了本机，其他客户端都无法用网络连接到本MariaDB服务器。<br>而bind-address这个参数是指定哪些ip地址被配置，使得MariaDB服务器只回应哪些ip地址的请求</p>
</blockquote>
<p>2.如果仍然不能访问，则有可能是防火墙的原因。在shell下执行<code>/etc/init.d/iptables stop</code>关闭防火墙。</p>
<p>附：MariaDB操作权限</p>
<table>
<thead>
<tr>
<th>权限</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>ALTER</td>
<td>Allows use of <code>ALTER TABLE</code></td>
</tr>
<tr>
<td>ALTER ROUTINE</td>
<td>Alters or drops stored routines</td>
</tr>
<tr>
<td>CREATE</td>
<td>Allows user of <code>CREATE TABLE</code></td>
</tr>
<tr>
<td>CREATE ROUTINE</td>
<td>Creates stored routines</td>
</tr>
<tr>
<td>CREATE TEMPORARY TABLE</td>
<td>Allows user of <code>CREATE TEMPORARY TABLE</code></td>
</tr>
<tr>
<td>CREATE USER</td>
<td>Allows use of<code>CREATE USER</code>,<code>DROP USER</code>,<code>RENAME USER</code>, and <code>REVOKE ALL PRIVILEGES</code></td>
</tr>
<tr>
<td>CREATE VIEW</td>
<td>Allows use of <code>CREATE VIEW</code></td>
</tr>
<tr>
<td>DELETE</td>
<td>Allows use of <code>DELETE</code></td>
</tr>
<tr>
<td>DROP</td>
<td>Allows use of <code>DROP TABLE</code></td>
</tr>
<tr>
<td>EXECUTE</td>
<td>Allows the user to run stored routines</td>
</tr>
<tr>
<td>FILE</td>
<td>Allows use of <code>SELECT...INTO OUTFILE</code> and <code>LOAD DATA INFILE</code></td>
</tr>
<tr>
<td>INDEX</td>
<td>Allows use of <code>CREATE INDEX</code> and <code>DROP INDEX</code></td>
</tr>
<tr>
<td>INSERT</td>
<td>Allows use of <code>INSERT</code></td>
</tr>
<tr>
<td>LOCK TABLES</td>
<td>Allows use of <code>LOCK TABLES</code> on tables for which the user also has <code>SELECT</code> privileges</td>
</tr>
<tr>
<td>PROCESS</td>
<td>Allows use of `SHOW FULL PROCESSLIST</td>
</tr>
<tr>
<td>RELOAD</td>
<td>Allows use of <code>FLUSH</code></td>
</tr>
<tr>
<td>REPLICATION</td>
<td>Allows the user to ask where slave or master</td>
</tr>
<tr>
<td>CLIENT</td>
<td>servers are</td>
</tr>
<tr>
<td>REPLICATION SLAVE</td>
<td>Needed for replication slaves</td>
</tr>
<tr>
<td>SELECT</td>
<td>Allows use of <code>SELECT</code></td>
</tr>
<tr>
<td>SHOW DATABASES</td>
<td>Allows use of <code>SHOW DATABASE</code></td>
</tr>
<tr>
<td>SHOW VIEW</td>
<td>Allows use of <code>SHOW CREATE VIEW</code></td>
</tr>
<tr>
<td>SHUTDOWN</td>
<td>Allows use of <code>mysqladmin shutdown</code></td>
</tr>
<tr>
<td>SUPER</td>
<td>Allows use of <code>CHANGE MASTER</code>,<code>KILL</code>,<code>PURGE MASTER LOGS</code>,and<code>SET GLOBAL</code> SQL statements. Allows<code>mysqladmin debug</code> command.Allows one extra connection to be made if maximum connections are reached.</td>
</tr>
<tr>
<td>UPDATE</td>
<td>Allows use of <code>UPDATE</code></td>
</tr>
<tr>
<td>USAGE</td>
<td>Allows connection without any specific privileges</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>基于logstash同步mysql数据到elasticsearch</title>
    <url>/2021-08-20-%E5%9F%BA%E4%BA%8Elogstash%E5%90%8C%E6%AD%A5mysql%E6%95%B0%E6%8D%AE%E5%88%B0elasticsearch/</url>
    <content><![CDATA[<h2 id="基于logstash同步mysql数据到elasticsearch"><a href="#基于logstash同步mysql数据到elasticsearch" class="headerlink" title="基于logstash同步mysql数据到elasticsearch"></a><strong>基于logstash同步mysql数据到elasticsearch</strong></h2><ul>
<li><p>去官网<a href="https://www.elastic.co/cn/downloads/past-releases#logstash%E4%B8%8B%E8%BD%BD%E4%B8%8Eelasticsearch%E5%90%8C%E7%89%88%E6%9C%AC%E7%9A%84%E5%AE%89%E8%A3%85%E5%8C%85">https://www.elastic.co/cn/downloads/past-releases#logstash下载与elasticsearch同版本的安装包</a></p>
<p>wget <a href="https://artifacts.elastic.co/downloads/logstash/logstash-6.4.3.tar.gz">https://artifacts.elastic.co/downloads/logstash/logstash-6.4.3.tar.gz</a></p>
</li>
</ul>
<ul>
<li><p>解压 <code>tar -zxvf logstash-6.4.3.tar.gz </code></p>
</li>
<li><p>下载一个mysql驱动包<code>mysql-connector-java-5.1.41.jar</code>可以从本地maven库上传</p>
<span id="more"></span></li>
<li><p>创建一个配置文件如下</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">input</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">jdbc</span> <span class="string">&#123;</span></span><br><span class="line"><span class="comment">        # 设置 MySql/MariaDB 数据库url以及数据库名称</span></span><br><span class="line">        <span class="attr">jdbc_connection_string</span> =<span class="string">&gt; &quot;jdbc:mysql://192.168.31.29:3306/foodie-shop?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect&amp;useSSL=false&quot;</span></span><br><span class="line"><span class="comment">        # 用户名和密码</span></span><br><span class="line">        <span class="attr">jdbc_user</span> =<span class="string">&gt; &quot;root&quot;</span></span><br><span class="line">        <span class="attr">jdbc_password</span> =<span class="string">&gt; &quot;root1234&quot;</span></span><br><span class="line"><span class="comment">        # 数据库驱动所在位置，可以是绝对路径或者相对路径</span></span><br><span class="line">        <span class="attr">jdbc_driver_library</span> =<span class="string">&gt; &quot;/usr/local/logstash-6.4.3/sync/mysql-connector-java-5.1.41.jar&quot;</span></span><br><span class="line"><span class="comment">        # 驱动类名</span></span><br><span class="line">        <span class="attr">jdbc_driver_class</span> =<span class="string">&gt; &quot;com.mysql.jdbc.Driver&quot;</span></span><br><span class="line"><span class="comment">        # 开启分页</span></span><br><span class="line">        <span class="attr">jdbc_paging_enabled</span> =<span class="string">&gt; &quot;true&quot;</span></span><br><span class="line"><span class="comment">        # 分页每页数量，可以自定义</span></span><br><span class="line">        <span class="attr">jdbc_page_size</span> =<span class="string">&gt; &quot;1000&quot;</span></span><br><span class="line"><span class="comment">        # 执行的sql文件路径</span></span><br><span class="line">        <span class="attr">statement_filepath</span> =<span class="string">&gt; &quot;/usr/local/logstash-6.4.3/sync/foodie-items.sql&quot;</span></span><br><span class="line"><span class="comment">        # 设置定时任务间隔  含义：分、时、天、月、年，全部为*默认含义为每分钟跑一次任务</span></span><br><span class="line">        <span class="attr">schedule</span> =<span class="string">&gt; &quot;* * * * *&quot;</span></span><br><span class="line"><span class="comment">        # 索引类型</span></span><br><span class="line">        <span class="attr">type</span> =<span class="string">&gt; &quot;_doc&quot;</span></span><br><span class="line"><span class="comment">        # 是否开启记录上次追踪的结果，也就是上次更新的时间，这个会记录到 last_run_metadata_path 的文件</span></span><br><span class="line">        <span class="attr">use_column_value</span> =<span class="string">&gt; true</span></span><br><span class="line"><span class="comment">        # 记录上一次追踪的结果值</span></span><br><span class="line">        <span class="attr">last_run_metadata_path</span> =<span class="string">&gt; &quot;/usr/local/logstash-6.4.3/sync/track_time&quot;</span></span><br><span class="line"><span class="comment">        # 如果 use_column_value 为true， 配置本参数，追踪的 column 名，可以是自增id或者时间</span></span><br><span class="line">        <span class="attr">tracking_column</span> =<span class="string">&gt; &quot;updated_time&quot;</span></span><br><span class="line"><span class="comment">        # tracking_column 对应字段的类型</span></span><br><span class="line">        <span class="attr">tracking_column_type</span> =<span class="string">&gt; &quot;timestamp&quot;</span></span><br><span class="line"><span class="comment">        # 是否清除 last_run_metadata_path 的记录，true则每次都从头开始查询所有的数据库记录</span></span><br><span class="line">        <span class="attr">clean_run</span> =<span class="string">&gt; false</span></span><br><span class="line"><span class="comment">        # 数据库字段名称大写转小写</span></span><br><span class="line">        <span class="attr">lowercase_column_names</span> =<span class="string">&gt; false</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">output</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">elasticsearch</span> <span class="string">&#123;</span></span><br><span class="line"><span class="comment">        # es地址</span></span><br><span class="line">        <span class="attr">hosts</span> =<span class="string">&gt; [&quot;192.168.31.226:9200&quot;]</span></span><br><span class="line"><span class="comment">        # 同步的索引名</span></span><br><span class="line">        <span class="attr">index</span> =<span class="string">&gt; &quot;foodie-items&quot;</span></span><br><span class="line"><span class="comment">        # 设置_docID和数据相同</span></span><br><span class="line"><span class="comment">        # document_id =&gt; &quot;%&#123;id&#125;&quot;</span></span><br><span class="line">        <span class="attr">document_id</span> =<span class="string">&gt; &quot;%&#123;itemId&#125;&quot;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">		# 定义模板名称</span></span><br><span class="line">		<span class="attr">template_name</span> =<span class="string">&gt; &quot;myik&quot;</span></span><br><span class="line"><span class="comment">		# 模板所在位置</span></span><br><span class="line">		<span class="attr">template</span> =<span class="string">&gt; &quot;/usr/local/logstash-6.4.3/sync/logstash-ik.json&quot;</span></span><br><span class="line"><span class="comment">		# 重写模板</span></span><br><span class="line">		<span class="attr">template_overwrite</span> =<span class="string">&gt; true</span></span><br><span class="line"><span class="comment">		# 默认为true, false关闭logstas 自动管理模板功能,如果自定义模板,则设置为false</span></span><br><span class="line">		<span class="attr">manage_template</span> =<span class="string">&gt; false</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    # 日志输出</span></span><br><span class="line">    <span class="attr">stdout</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">codec</span> =<span class="string">&gt; json_lines</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure></li>
<li><p>参照配置文件中路径创建待执行的sql脚本</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	i.item_name <span class="keyword">AS</span> itemName,</span><br><span class="line">	i.id <span class="keyword">AS</span> itemId,</span><br><span class="line">	i.sell_counts <span class="keyword">AS</span> sellCounts,</span><br><span class="line">	ii.url <span class="keyword">AS</span> imgUrl,</span><br><span class="line">	tempSpec.priceDiscount <span class="keyword">as</span> price,</span><br><span class="line">			i.updated_time </span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">	items i</span><br><span class="line">	  <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> items_img ii <span class="keyword">ON</span> i.id <span class="operator">=</span> ii.item_id</span><br><span class="line">	  <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> (</span><br><span class="line">		<span class="keyword">SELECT</span> item_id, <span class="built_in">MIN</span>(price_discount) <span class="keyword">AS</span> priceDiscount <span class="keyword">FROM</span> items_spec <span class="keyword">GROUP</span> <span class="keyword">BY</span> item_id</span><br><span class="line">	  ) tempSpec <span class="keyword">on</span> i.id <span class="operator">=</span> tempSpec.item_id</span><br><span class="line">  <span class="keyword">WHERE</span></span><br><span class="line">	ii.is_main <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">	## :sql_last_value 是logstash维护的上次更新时间</span><br><span class="line">    <span class="keyword">and</span> i.updated_time  <span class="operator">&gt;=</span> :sql_last_value</span><br></pre></td></tr></table></figure></li>
<li><p>自定义模板配置(配置中文分词) <code>logstash-ik.json</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">&#123;</span></span><br><span class="line">	<span class="meta">&quot;order&quot;</span>: <span class="string">0,</span></span><br><span class="line">	<span class="meta">&quot;version&quot;</span>: <span class="string">1,</span></span><br><span class="line">	<span class="meta">&quot;index_patterns&quot;</span>: <span class="string">[&quot;*&quot;],</span></span><br><span class="line">	<span class="meta">&quot;settings&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">		<span class="meta">&quot;index&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">			<span class="meta">&quot;refresh_interval&quot;</span>: <span class="string">&quot;5s&quot;</span></span><br><span class="line">		<span class="attr">&#125;</span></span><br><span class="line">	<span class="attr">&#125;,</span></span><br><span class="line">	<span class="meta">&quot;mappings&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">		<span class="meta">&quot;_default_&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">			<span class="meta">&quot;dynamic_templates&quot;</span>: <span class="string">[</span></span><br><span class="line">				<span class="attr">&#123;</span></span><br><span class="line">					<span class="meta">&quot;message_field&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">						<span class="meta">&quot;path_match&quot;</span>: <span class="string">&quot;message&quot;,</span></span><br><span class="line">						<span class="meta">&quot;match_mapping_type&quot;</span>: <span class="string">&quot;string&quot;,</span></span><br><span class="line">						<span class="meta">&quot;mapping&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">							<span class="meta">&quot;type&quot;</span>: <span class="string">&quot;text&quot;,</span></span><br><span class="line">							<span class="meta">&quot;norms&quot;</span>: <span class="string">false</span></span><br><span class="line">						<span class="attr">&#125;</span></span><br><span class="line">					<span class="attr">&#125;</span></span><br><span class="line">				<span class="attr">&#125;,</span></span><br><span class="line">				<span class="attr">&#123;</span></span><br><span class="line">					<span class="meta">&quot;string_fields&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">						<span class="meta">&quot;match&quot;</span>: <span class="string">&quot;*&quot;,</span></span><br><span class="line">						<span class="meta">&quot;match_mapping_type&quot;</span>: <span class="string">&quot;string&quot;,</span></span><br><span class="line">						<span class="meta">&quot;mapping&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">							<span class="meta">&quot;type&quot;</span>: <span class="string">&quot;text&quot;,</span></span><br><span class="line">							<span class="meta">&quot;norms&quot;</span>: <span class="string">false,</span></span><br><span class="line">							<span class="meta">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_max_word&quot;,</span></span><br><span class="line">							<span class="meta">&quot;fields&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">								<span class="meta">&quot;keyword&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">									<span class="meta">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;,</span></span><br><span class="line">									<span class="meta">&quot;ignore_above&quot;</span>: <span class="string">256</span></span><br><span class="line">								<span class="attr">&#125;</span></span><br><span class="line">							<span class="attr">&#125;</span></span><br><span class="line">						<span class="attr">&#125;</span></span><br><span class="line">					<span class="attr">&#125;</span></span><br><span class="line">				<span class="attr">&#125;</span></span><br><span class="line">			<span class="attr">],</span></span><br><span class="line">			<span class="meta">&quot;properties&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">				<span class="meta">&quot;@timestamp&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">					<span class="meta">&quot;type&quot;</span>: <span class="string">&quot;date&quot;</span></span><br><span class="line">				<span class="attr">&#125;,</span></span><br><span class="line">				<span class="meta">&quot;@version&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">					<span class="meta">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;</span></span><br><span class="line">				<span class="attr">&#125;,</span></span><br><span class="line">				<span class="meta">&quot;geoip&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">					<span class="meta">&quot;dynamic&quot;</span>: <span class="string">true,</span></span><br><span class="line">					<span class="meta">&quot;properties&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">						<span class="meta">&quot;ip&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">							<span class="meta">&quot;type&quot;</span>: <span class="string">&quot;ip&quot;</span></span><br><span class="line">						<span class="attr">&#125;,</span></span><br><span class="line">						<span class="meta">&quot;location&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">							<span class="meta">&quot;type&quot;</span>: <span class="string">&quot;geo_point&quot;</span></span><br><span class="line">						<span class="attr">&#125;,</span></span><br><span class="line">						<span class="meta">&quot;latitude&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">							<span class="meta">&quot;type&quot;</span>: <span class="string">&quot;half_float&quot;</span></span><br><span class="line">						<span class="attr">&#125;,</span></span><br><span class="line">						<span class="meta">&quot;longitude&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">							<span class="meta">&quot;type&quot;</span>: <span class="string">&quot;half_float&quot;</span></span><br><span class="line">						<span class="attr">&#125;</span></span><br><span class="line">					<span class="attr">&#125;</span></span><br><span class="line">				<span class="attr">&#125;</span></span><br><span class="line">			<span class="attr">&#125;</span></span><br><span class="line">		<span class="attr">&#125;</span></span><br><span class="line">	<span class="attr">&#125;,</span></span><br><span class="line">	<span class="meta">&quot;aliases&quot;</span>: <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure></li>
<li><p>logstash启动命令<code>./logstash -f /usr/local/logstash-6.4.3/sync/logstatsh-db-sync.conf</code></p>
</li>
</ul>
]]></content>
      <categories>
        <category>elasticsearch</category>
      </categories>
      <tags>
        <tag>elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>解决公网ip经常变动</title>
    <url>/2021-08-13-%E8%A7%A3%E5%86%B3%E5%85%AC%E7%BD%91ip%E7%BB%8F%E5%B8%B8%E5%8F%98%E5%8A%A8/</url>
    <content><![CDATA[<h2 id="解决公网ip经常变动"><a href="#解决公网ip经常变动" class="headerlink" title="解决公网ip经常变动"></a>解决公网ip经常变动</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>​    家里申请了电信的公网ip, 但是如果停电或者重新拨号都会导致这个ip变更.很多配置好的应用都需要重新配置ip地址太麻烦了</p>
<h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><ul>
<li><p>现成的产品类似花生壳这些内网穿透都要收费, 我已有公网ip感觉不划算</p>
</li>
<li><p>想到了域名配置dns解析, 应用里面都配置域名代替ip地址.每次ip变了我只需要去改一下域名的dns解析就可以了</p>
<p>但是还会有问题, 每次都需要手动改一下, 并且还必须得连上家里网才能知道最新的公网ip</p>
</li>
<li><p>查了阿里云/腾讯云/华为云等等dns解析都对外提供了<code>api</code>文档, 思路是写个定时脚本获取到公网ip再与阿里云上的解析记录做比对,</p>
<p>阿里云解析记录不是当前的公网ip的话, 更新阿里云的解析记录</p>
</li>
</ul>
<span id="more"></span>

<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul>
<li><p>定时获取当前公网ip去尝试更新</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改域名定时任务</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangJiaLun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021-08-11</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModifyDomainNameTask</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AliDns aliDns;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;pub-network-address&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String netWorkAddress;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  每五分钟获取公网ip去尝试更新域名解析记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0 0/5 * * * ? &quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkDomainNameValue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String value = HttpUtil.get(netWorkAddress).replace(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            aliDns.updateDomainRecord(value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>尝试更新阿里云解析记录</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 阿里云ddns配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangJiaLun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021-08-11</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AliDns</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;aliddns.access-key-id&#125;&quot;)</span></span><br><span class="line">    String ACCESS_KEY_ID ;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;aliddns.access-key-secret&#125;&quot;)</span></span><br><span class="line">    String ACCESS_KEY_SECRET;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;aliddns.domain-name&#125;&quot;)</span></span><br><span class="line">    String  DOMAIN_NAME;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;aliddns.end-point&#125;&quot;)</span></span><br><span class="line">    String END_POINT;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用AK&amp;SK初始化账号Client</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> accessKeyId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> accessKeySecret</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Client</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    com.aliyun.alidns20150109.<span class="function">Client <span class="title">createClient</span><span class="params">(String accessKeyId, String accessKeySecret)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Config config = <span class="keyword">new</span> Config()</span><br><span class="line">                .setAccessKeyId(accessKeyId)Secret</span><br><span class="line">                .setAccessKeySecret(accessKeySecret);</span><br><span class="line">        config.endpoint = END_POINT;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> com.aliyun.alidns20150109.Client(config);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  更新解析记录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 当前公网ip</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">updateDomainRecord</span> <span class="params">(String value)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        com.aliyun.alidns20150109.Client client = <span class="keyword">this</span>.createClient(ACCESS_KEY_ID, ACCESS_KEY_SECRET);</span><br><span class="line"></span><br><span class="line">        DescribeDomainRecordsRequest domainRecordsRequest = <span class="keyword">new</span> DescribeDomainRecordsRequest();</span><br><span class="line">        domainRecordsRequest.setDomainName(DOMAIN_NAME);</span><br><span class="line">        <span class="comment">// 解析记录列表</span></span><br><span class="line">        DescribeDomainRecordsResponse domainRecordsResponse = client.describeDomainRecords(domainRecordsRequest);</span><br><span class="line">        <span class="keyword">for</span> (DescribeDomainRecordsResponseBody.DescribeDomainRecordsResponseBodyDomainRecordsRecord record : domainRecordsResponse.body.domainRecords.record) &#123;</span><br><span class="line">            UpdateDomainRecordRequest updateDomainRecordRequest = <span class="keyword">new</span> UpdateDomainRecordRequest();</span><br><span class="line">            <span class="keyword">if</span> (record.value.equals(value)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            BeanUtils.copyProperties(record, updateDomainRecordRequest);</span><br><span class="line">            updateDomainRecordRequest.setValue(value);</span><br><span class="line">            client.updateDomainRecord(updateDomainRecordRequest);</span><br><span class="line">            log.info(<span class="string">&quot;域名:&#123;&#125;的主机记录&#123;&#125;更新为记录值: &#123;&#125;&quot;</span>,DOMAIN_NAME, record.RR,value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>去阿里云平台上面把域名的解析记录随便改了个值, 过几分钟后变成了我当前的公网ip地址</p>
<h3 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/wangJiaLun-china/ddns">https://github.com/wangJiaLun-china/ddns</a></p>
]]></content>
  </entry>
  <entry>
    <title>Spring Batch</title>
    <url>/2021-04-26-springbatch/</url>
    <content><![CDATA[<h2 id="Spring-Batch-基本介绍"><a href="#Spring-Batch-基本介绍" class="headerlink" title="Spring Batch 基本介绍"></a>Spring Batch 基本介绍</h2><p>首先，Spring Batch运行的基本单位是一个Job，一个Job就做一件批处理的事情。一个Job包含很多Step，step就是每个job要执行的单个步骤。如下图所示，Step里面，会有Tasklet，Tasklet是一个任务单元，它是属于可以重复利用的东西。</p>
<p>然后是Chunk，chunk就是数据块，你需要定义多大的数据量是一个chunk。Chunk里面就是不断循环的一个流程，读数据，处理数据，然后写数据。Spring Batch会不断的循环这个流程，直到批处理数据完成。</p>
<span id="more"></span>

<h2 id="Spring-Batch-功能"><a href="#Spring-Batch-功能" class="headerlink" title="Spring Batch 功能"></a>Spring Batch 功能</h2><ul>
<li>批量处理</li>
<li>日志跟踪</li>
<li>事务管理</li>
<li>作业重启</li>
<li>跳过和资源管理</li>
<li>分割技术缩放弹簧批量应用程序</li>
</ul>
<h2 id="Spring-Batch-特点"><a href="#Spring-Batch-特点" class="headerlink" title="Spring Batch 特点"></a>Spring Batch 特点</h2><ul>
<li>灵活性<ul>
<li>Spring批处理应用程序非常灵活。只需更改XML文件即可更改应用程序中的处理顺序。</li>
</ul>
</li>
<li>可维护性<ul>
<li>Spring批量应用程序易于维护。 Spring Batch作业包括步骤，每个步骤都可以进行分离，测试和更新，而不影响其他步骤。</li>
</ul>
</li>
<li>可伸缩性<ul>
<li>使用分区技术，可以缩放Spring Batch应用程序。</li>
<li>并行执行作业的步骤。</li>
<li>并行执行单个线程。</li>
</ul>
</li>
<li>可靠性<ul>
<li>如果发生任何故障，可以通过拆除步骤来从停止的地方重新开始作业。</li>
</ul>
</li>
<li>支持多种文件格式<ul>
<li>Spring Batch为XML，Flat文件，CSV，MYSQL，Hibernate，JDBC，Mongo，Neo4j等大量写入器和读取器提供支持。</li>
</ul>
</li>
<li>多种启动作业的方式<ul>
<li>可以使用Web应用程序，Java程序，命令行等来启动Spring Batch作业。</li>
</ul>
</li>
</ul>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ul>
<li>pom.xml配置</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Spring Batch dependencies --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.batch<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-batch-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.batch.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.batch<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-batch-infrastructure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.batch.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br></pre></td></tr></table></figure>



<h2 id="Spring-Batch-架构"><a href="#Spring-Batch-架构" class="headerlink" title="Spring Batch 架构"></a>Spring Batch 架构</h2><ul>
<li>应用程序 - 此组件包含使用Spring Batch 框架编写的所有作业和代码</li>
<li>批处理核心 - 此组件包含控制和启动批处理作业所需的所有API类</li>
<li>批处理基础结构 - 此组件包含应用程序和批处理核心组件使用的读取器, 编写器, 服务</li>
</ul>
<h2 id="Spring-Batch-组件及连接"><a href="#Spring-Batch-组件及连接" class="headerlink" title="Spring Batch 组件及连接"></a>Spring Batch 组件及连接</h2><pre class="mermaid">graph LR
jobLauncher[Job Launcher] --- job[Job] 
job[Job]  --- step[Step]
jobRepository[Job Repository] --- jobLauncher[Job Launcher]
jobRepository[Job Repository] --- job[Job]
jobRepository[Job Repository] --- step[Step] 
step[Step] --- itemReader[Item Reader]
step[Step] --- iterProcess[Item Process]
step[Step] --- iterWriter[Item Writer]</pre>



<ul>
<li><p><strong>Job</strong> - 在Spring Batch应用中，作业是要执行的批处理。它从头到尾不间断地运行。此作业进一步分为步骤（或作业包含步骤）。</p>
<ul>
<li><p>将使用XML文件或 Java类在Spring Batch中配置作业。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">job</span> <span class="attr">id</span> = <span class="string">&quot;jobid&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">step</span> <span class="attr">id</span> = <span class="string">&quot;step1&quot;</span> <span class="attr">next</span> = <span class="string">&quot;step2&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">step</span> <span class="attr">id</span> = <span class="string">&quot;step2&quot;</span> <span class="attr">next</span> = <span class="string">&quot;step3&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">step</span> <span class="attr">id</span> = <span class="string">&quot;step3&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">job</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在<code>&lt;job&gt;</code> <code>&lt;/ job&gt;</code>标记内配置批处理作业。它有一个名为 <strong>id</strong> 的属性。在这些标签中定义了步骤的定义和顺序。</p>
</li>
</ul>
</li>
<li><p><strong>Restartable</strong> - 通常，当一个作业正在运行时，尝试再次启动它，这被认为是 <strong>restart</strong> ，它将再次启动。为避免这种情况，您需要将 <strong>restartable</strong> 值设置为 <strong>false</strong> ，如下所示。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">job</span> <span class="attr">id</span> = <span class="string">&quot;jobid&quot;</span> <span class="attr">restartable</span> = <span class="string">&quot;false&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">job</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>Step</strong> - 是其中包含必要的信息以定义并执行作业（其一部分）的作业的一个独立部分。</p>
<p>如图中所示，每个步骤由ItemReader，ItemProcessor（可选）和ItemWriter组成。</p>
<ul>
<li><p><strong>Reader</strong> -  一个 <strong>item reader</strong> 数据读入来自特定源的一个Spring批量应用，</p>
</li>
<li><p><strong>Writer</strong> - 一个 <strong>item writer</strong> 从Spring批处理应用到特定目的地写入数据。</p>
</li>
<li><p><strong>processor</strong>  -  一个 <strong>Item processor</strong> 是包含其处理读入弹簧批次的数据的处理代码的类。如果应用程序读取 <strong>“n”</strong> 条记录，则处理器中的代码将在每条记录上执行。当没有给出读写器时， <strong>tasklet</strong> 充当SpringBatch的处理器。它只处理一个任务。例如，如果正在编写一个简单的步骤，从MySQL数据库读取数据并处理它并将其写入文件（平面），那么的步骤使用</p>
</li>
<li><p><strong>reader</strong> 从MySQL数据库中读取。</p>
</li>
<li><p><strong>writer</strong> ，其写入到一个平面文件。</p>
</li>
<li><p><strong>custom processor</strong> ，处理数据。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">job</span> <span class="attr">id</span> = <span class="string">&quot;helloWorldJob&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">step</span> <span class="attr">id</span> = <span class="string">&quot;step1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tasklet</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">chunk</span> <span class="attr">reader</span> = <span class="string">&quot;mysqlReader&quot;</span> <span class="attr">writer</span> = <span class="string">&quot;fileWriter&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">processor</span> = <span class="string">&quot;CustomitemProcessor&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">chunk</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tasklet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">step</span>&gt;</span></span><br><span class="line">&lt;/ job&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>JobRepository</strong> Spring Batch中的作业存储库为JobLauncher，Job和Step实现提供创建，检索，更新和删除（CRUD）操作。将在XML文件中定义一个作业存储库，如下所示。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">job-repository</span> <span class="attr">id</span> = <span class="string">&quot;jobRepository&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">data-source</span> = <span class="string">&quot;dataSource&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">transaction-manager</span> = <span class="string">&quot;transactionManager&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">isolation-level-for-create</span> = <span class="string">&quot;SERIALIZABLE&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">table-prefix</span> = <span class="string">&quot;BATCH_&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">max-varchar-length</span> = <span class="string">&quot;1000&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>JobLauncher</strong> </p>
<pre><code>JobLauncher是一个使用 **给定参数集** 启动Spring Batch作业的接口。 **SampleJoblauncher** 是实现 **JobLauncher** 接口的类。以下是JobLauncher的配置。

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;bean id = &quot;jobLauncher&quot;</span><br><span class="line">   class = &quot;org.springframework.batch.core.launch.support.SimpleJobLauncher&quot;&gt;</span><br><span class="line">   &lt;property name = &quot;jobRepository&quot; ref = &quot;jobRepository&quot; /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
<li><p><strong>JobInstance</strong></p>
<pre><code>一个 **JobIinstance** 代表工作的逻辑运行; 它是在开始工作时创建的。每个作业实例由作业名称和运行时传递给它的参数区分。

如果JobInstance执行失败，则可以再次执行相同的JobInstance。因此，每个JobInstance可以有多个作业执行。
</code></pre>
</li>
<li><p><strong>JobExecution和StepExecution</strong></p>
<pre><code>JobExecution和StepExecution是作业/步骤执行的表示。它们包含作业/步骤的运行信息，例如开始时    间（作业/步骤），结束时间（作业/步骤）。
</code></pre>
</li>
</ul>
<h3 id="Job"><a href="#Job" class="headerlink" title="Job"></a>Job</h3><ul>
<li><p>介绍：</p>
<ul>
<li><p>作业，批处理中的核心概念，是Batch操作的基础单元</p>
</li>
<li><p>每个作业Job有一个或多个作业步骤Step</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wjl.springbatch.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.Job;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.Step;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.StepContribution;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.JobBuilderFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.StepBuilderFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.scope.context.ChunkContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.step.tasklet.Tasklet;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.repeat.RepeatStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangJiaLun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-12-11</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableBatchProcessing</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JobDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  注入创建任务对象的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobBuilderFactory jobBuilderFactory;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  注入创建Step对象的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StepBuilderFactory stepBuilderFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Job <span class="title">jobDemoJob</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">&quot;jobDemoJob&quot;</span>)</span><br><span class="line">                <span class="comment">// next 顺序执行</span></span><br><span class="line"><span class="comment">/*                .start(step1())</span></span><br><span class="line"><span class="comment">                .next(step2())</span></span><br><span class="line"><span class="comment">                .next(step3())*/</span></span><br><span class="line">                <span class="comment">// on 指定条件  to 到达什么步骤 from 从哪个步骤开始 fail 失败 stopAndRestart 停止重启某步骤</span></span><br><span class="line">                .start(step1()).on(<span class="string">&quot;COMPLETED&quot;</span>).to(step2())</span><br><span class="line">                .from(step2()).on(<span class="string">&quot;COMPLETED&quot;</span>).to(step3())</span><br><span class="line">                .from(step3()).end()</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Step <span class="title">step1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">&quot;step1&quot;</span>)</span><br><span class="line">                .tasklet(<span class="keyword">new</span> Tasklet() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> RepeatStatus <span class="title">execute</span><span class="params">(StepContribution contribution, ChunkContext chunkContext)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;step1&quot;</span>);</span><br><span class="line">                        <span class="keyword">return</span> RepeatStatus.FINISHED;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Step <span class="title">step2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">&quot;step2&quot;</span>)</span><br><span class="line">                .tasklet(<span class="keyword">new</span> Tasklet() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> RepeatStatus <span class="title">execute</span><span class="params">(StepContribution contribution, ChunkContext chunkContext)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;step2&quot;</span>);</span><br><span class="line">                        <span class="keyword">return</span> RepeatStatus.FINISHED;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Step <span class="title">step3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">&quot;step3&quot;</span>)</span><br><span class="line">                .tasklet(<span class="keyword">new</span> Tasklet() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> RepeatStatus <span class="title">execute</span><span class="params">(StepContribution contribution, ChunkContext chunkContext)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;step3&quot;</span>);</span><br><span class="line">                        <span class="keyword">return</span> RepeatStatus.FINISHED;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="Flow"><a href="#Flow" class="headerlink" title="Flow"></a>Flow</h3><p><strong>介绍</strong>：</p>
<ul>
<li><p>Flow 是多个step的集合</p>
</li>
<li><p>可以被多个Job 复用</p>
</li>
<li><p>使用FlowBuilder来创建</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wjl.springbatch.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.Job;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.Step;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.StepContribution;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.JobBuilderFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.StepBuilderFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.job.builder.FlowBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.job.flow.Flow;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.scope.context.ChunkContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.step.tasklet.Tasklet;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.repeat.RepeatStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangJiaLun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-12-11</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableBatchProcessing</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  注入创建任务对象的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobBuilderFactory jobBuilderFactory;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  注入创建Step对象的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StepBuilderFactory stepBuilderFactory;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  创建 flowDemoFlow 对象， 指明包含了哪些step</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Flow <span class="title">flowDemoFlow</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FlowBuilder&lt;Flow&gt;(<span class="string">&quot;flowDemoFlow&quot;</span>)</span><br><span class="line">                .start(flowDemoStep1())</span><br><span class="line">                .next(flowDemoStep2())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Job <span class="title">flowDemoJob</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">&quot;flowDemoJob&quot;</span>)</span><br><span class="line">                .start(flowDemoFlow())</span><br><span class="line">                .next(flowDemoStep3())</span><br><span class="line">                .end()</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Step <span class="title">flowDemoStep1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">&quot;flowDemoStep1&quot;</span>)</span><br><span class="line">                .tasklet(<span class="keyword">new</span> Tasklet() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> RepeatStatus <span class="title">execute</span><span class="params">(StepContribution contribution, ChunkContext chunkContext)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;flowDemoStep1&quot;</span>);</span><br><span class="line">                        <span class="keyword">return</span> RepeatStatus.FINISHED;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Step <span class="title">flowDemoStep2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">&quot;flowDemoStep2&quot;</span>)</span><br><span class="line">                .tasklet(<span class="keyword">new</span> Tasklet() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> RepeatStatus <span class="title">execute</span><span class="params">(StepContribution contribution, ChunkContext chunkContext)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;flowDemoStep2&quot;</span>);</span><br><span class="line">                        <span class="keyword">return</span> RepeatStatus.FINISHED;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Step <span class="title">flowDemoStep3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">&quot;flowDemoStep3&quot;</span>)</span><br><span class="line">                .tasklet(<span class="keyword">new</span> Tasklet() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> RepeatStatus <span class="title">execute</span><span class="params">(StepContribution contribution, ChunkContext chunkContext)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;flowDemoStep3&quot;</span>);</span><br><span class="line">                        <span class="keyword">return</span> RepeatStatus.FINISHED;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Split-并发执行"><a href="#Split-并发执行" class="headerlink" title="Split 并发执行"></a>Split 并发执行</h3><p><strong>介绍</strong>：实现任务中多个step或多个flow并发执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wjl.springbatch.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.Job;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.Step;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.StepContribution;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.JobBuilderFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.StepBuilderFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.job.builder.FlowBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.job.flow.Flow;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.scope.context.ChunkContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.step.tasklet.Tasklet;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.repeat.RepeatStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.task.SimpleAsyncTaskExecutor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangJiaLun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-12-11</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableBatchProcessing</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpiltDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  注入创建任务对象的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobBuilderFactory jobBuilderFactory;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  注入创建Step对象的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StepBuilderFactory stepBuilderFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Step <span class="title">spiltDemoStep1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">&quot;spiltDemoStep1&quot;</span>)</span><br><span class="line">                .tasklet(<span class="keyword">new</span> Tasklet() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> RepeatStatus <span class="title">execute</span><span class="params">(StepContribution contribution, ChunkContext chunkContext)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;spiltDemoStep1&quot;</span>);</span><br><span class="line">                        <span class="keyword">return</span> RepeatStatus.FINISHED;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Step <span class="title">spiltDemoStep2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">&quot;spiltDemoStep2&quot;</span>)</span><br><span class="line">                .tasklet(<span class="keyword">new</span> Tasklet() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> RepeatStatus <span class="title">execute</span><span class="params">(StepContribution contribution, ChunkContext chunkContext)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;spiltDemoStep2&quot;</span>);</span><br><span class="line">                        <span class="keyword">return</span> RepeatStatus.FINISHED;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Step <span class="title">spiltDemoStep3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">&quot;spiltDemoStep3&quot;</span>)</span><br><span class="line">                .tasklet(<span class="keyword">new</span> Tasklet() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> RepeatStatus <span class="title">execute</span><span class="params">(StepContribution contribution, ChunkContext chunkContext)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;spiltDemoStep3&quot;</span>);</span><br><span class="line">                        <span class="keyword">return</span> RepeatStatus.FINISHED;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Flow <span class="title">splitDemoFlow1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FlowBuilder&lt;Flow&gt;(<span class="string">&quot;splitDemoFlow1&quot;</span>)</span><br><span class="line">                .start(spiltDemoStep1())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Flow <span class="title">splitDemoFlow2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FlowBuilder&lt;Flow&gt;(<span class="string">&quot;splitDemoFlow2&quot;</span>)</span><br><span class="line">                .start(spiltDemoStep2())</span><br><span class="line">                .next(spiltDemoStep3())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Job <span class="title">splitDemoJob</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">&quot;splitDemoJob&quot;</span>)</span><br><span class="line">                .start(splitDemoFlow1())</span><br><span class="line">                .split(<span class="keyword">new</span> SimpleAsyncTaskExecutor()).add(splitDemoFlow2())</span><br><span class="line">                .end()</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="决策器"><a href="#决策器" class="headerlink" title="决策器"></a>决策器</h3><p><strong>接口</strong>：JobExecutionDecider</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wjl.springbatch.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.JobBuilderFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.StepBuilderFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.job.flow.FlowExecutionStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.job.flow.JobExecutionDecider;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.scope.context.ChunkContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.step.tasklet.Tasklet;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.repeat.RepeatStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangJiaLun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-12-11</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableBatchProcessing</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeciderDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  注入创建任务对象的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobBuilderFactory jobBuilderFactory;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  注入创建Step对象的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StepBuilderFactory stepBuilderFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Step <span class="title">deciderDemoStep1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">&quot;deciderDemoStep1&quot;</span>)</span><br><span class="line">                .tasklet(<span class="keyword">new</span> Tasklet() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> RepeatStatus <span class="title">execute</span><span class="params">(StepContribution contribution, ChunkContext chunkContext)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;deciderDemoStep1&quot;</span>);</span><br><span class="line">                        <span class="keyword">return</span> RepeatStatus.FINISHED;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Step <span class="title">deciderDemoStep2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">&quot;deciderDemoStep2&quot;</span>)</span><br><span class="line">                .tasklet(<span class="keyword">new</span> Tasklet() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> RepeatStatus <span class="title">execute</span><span class="params">(StepContribution contribution, ChunkContext chunkContext)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;even&quot;</span>);</span><br><span class="line">                        <span class="keyword">return</span> RepeatStatus.FINISHED;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Step <span class="title">deciderDemoStep3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">&quot;deciderDemoStep3&quot;</span>)</span><br><span class="line">                .tasklet(<span class="keyword">new</span> Tasklet() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> RepeatStatus <span class="title">execute</span><span class="params">(StepContribution contribution, ChunkContext chunkContext)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;odd&quot;</span>);</span><br><span class="line">                        <span class="keyword">return</span> RepeatStatus.FINISHED;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  决策器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JobExecutionDecider <span class="title">myDecider</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyDecider();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyDecider</span> <span class="keyword">implements</span> <span class="title">JobExecutionDecider</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> FlowExecutionStatus <span class="title">decide</span><span class="params">(JobExecution jobExecution, StepExecution stepExecution)</span> </span>&#123;</span><br><span class="line">            count ++;</span><br><span class="line">            <span class="keyword">if</span> (count % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> FlowExecutionStatus(<span class="string">&quot;even&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> FlowExecutionStatus(<span class="string">&quot;odd&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Job <span class="title">deciderDemoJob</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">&quot;deciderDemoJob&quot;</span>)</span><br><span class="line">                .start(deciderDemoStep1())</span><br><span class="line">                .next(myDecider())</span><br><span class="line">                .from(myDecider()).on(<span class="string">&quot;even&quot;</span>).to(deciderDemoStep2())</span><br><span class="line">                .from(myDecider()).on(<span class="string">&quot;odd&quot;</span>).to(deciderDemoStep3())</span><br><span class="line">                .from(deciderDemoStep3()).on(<span class="string">&quot;*&quot;</span>).to(myDecider())</span><br><span class="line">                .end()</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Job-嵌套"><a href="#Job-嵌套" class="headerlink" title="Job 嵌套"></a>Job 嵌套</h3><p><strong>介绍</strong>：一个Job可以嵌套在另一个Job中，被嵌套的Job被称为子Job,外部Job称为父Job，子Job不能单独执行，需要父Job来启动</p>
<p>配置文件配置 父Job对象名称 job:  names: parentJob</p>
<p>子job1:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wjl.springbatch.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.Job;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.Step;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.StepContribution;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.JobBuilderFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.StepBuilderFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.scope.context.ChunkContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.step.tasklet.Tasklet;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.repeat.RepeatStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangJiaLun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-12-11</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableBatchProcessing</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChildJob1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  注入创建任务对象的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobBuilderFactory jobBuilderFactory;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  注入创建Step对象的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StepBuilderFactory stepBuilderFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Step <span class="title">childJob1Step1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">&quot;childJob1Step1&quot;</span>)</span><br><span class="line">                .tasklet(<span class="keyword">new</span> Tasklet() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> RepeatStatus <span class="title">execute</span><span class="params">(StepContribution contribution, ChunkContext chunkContext)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;childJob1Step1&quot;</span>);</span><br><span class="line">                        <span class="keyword">return</span> RepeatStatus.FINISHED;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Job <span class="title">childJobOne</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">&quot;childJobOne&quot;</span>)</span><br><span class="line">                .start(childJob1Step1())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>子job2:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wjl.springbatch.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.Job;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.Step;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.StepContribution;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.JobBuilderFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.StepBuilderFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.scope.context.ChunkContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.step.tasklet.Tasklet;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.repeat.RepeatStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangJiaLun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2029-22-22</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableBatchProcessing</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChildJob2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  注入创建任务对象的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobBuilderFactory jobBuilderFactory;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  注入创建Step对象的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StepBuilderFactory stepBuilderFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Step <span class="title">childJob2Step1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">&quot;childJob2Step1&quot;</span>)</span><br><span class="line">                .tasklet(<span class="keyword">new</span> Tasklet() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> RepeatStatus <span class="title">execute</span><span class="params">(StepContribution contribution, ChunkContext chunkContext)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;childJob2Step1&quot;</span>);</span><br><span class="line">                        <span class="keyword">return</span> RepeatStatus.FINISHED;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Step <span class="title">childJob2Step2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">&quot;childJob2Step2&quot;</span>)</span><br><span class="line">                .tasklet(<span class="keyword">new</span> Tasklet() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> RepeatStatus <span class="title">execute</span><span class="params">(StepContribution contribution, ChunkContext chunkContext)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;childJob2Step2&quot;</span>);</span><br><span class="line">                        <span class="keyword">return</span> RepeatStatus.FINISHED;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Job <span class="title">childJobTwo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">&quot;childJobTwo&quot;</span>)</span><br><span class="line">                .start(childJob2Step1())</span><br><span class="line">                .next(childJob2Step2())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>父job:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wjl.springbatch.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.Job;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.Step;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.JobBuilderFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.StepBuilderFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.launch.JobLauncher;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.repository.JobRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.step.builder.JobStepBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.step.builder.StepBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.PlatformTransactionManager;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangJiaLun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-12-11</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableBatchProcessing</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NestedDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  注入创建任务对象的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobBuilderFactory jobBuilderFactory;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  注入创建Step对象的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StepBuilderFactory stepBuilderFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Job childJobOne;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Job childJobTwo;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  启动对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobLauncher jobLauncher;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Job <span class="title">parentJob</span><span class="params">(JobRepository jobRepository, PlatformTransactionManager transactionManager)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">&quot;parentJob&quot;</span>)</span><br><span class="line">                .start(childJobDemo1(jobRepository, transactionManager))</span><br><span class="line">                .next(childJobDemo2(jobRepository, transactionManager))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回的是Job类型的step， 特殊的step</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Step <span class="title">childJobDemo1</span><span class="params">(JobRepository jobRepository, PlatformTransactionManager transactionManager)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JobStepBuilder(<span class="keyword">new</span> StepBuilder(<span class="string">&quot;childJobDemo1&quot;</span>))</span><br><span class="line">                .job(childJobOne)</span><br><span class="line">                <span class="comment">// 使用父job的启动对象</span></span><br><span class="line">                .launcher(jobLauncher)</span><br><span class="line">                .repository(jobRepository)</span><br><span class="line">                .transactionManager(transactionManager)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回的是Job类型的step， 特殊的step</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Step <span class="title">childJobDemo2</span><span class="params">(JobRepository jobRepository, PlatformTransactionManager transactionManager)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JobStepBuilder(<span class="keyword">new</span> StepBuilder(<span class="string">&quot;childJobDemo2&quot;</span>))</span><br><span class="line">                .job(childJobTwo)</span><br><span class="line">                <span class="comment">// 使用父job的启动对象</span></span><br><span class="line">                .launcher(jobLauncher)</span><br><span class="line">                .repository(jobRepository)</span><br><span class="line">                .transactionManager(transactionManager)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h3><ul>
<li><p>介绍：</p>
<ul>
<li>用来监听批处理作业的执行情况<ul>
<li>JobExecutionListener(before, after)</li>
<li>StepExecutionListener(before, after)</li>
<li>ChunkListener(before, after, error)</li>
<li>ItemReadListener, ItemProcessListener, ItemWriteListener(before, after, error)</li>
</ul>
</li>
<li>创建监听可以通过实现接口或者使用注解</li>
</ul>
<p>job 级别 监听器 基于接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wjl.springbatch.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.JobExecution;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.JobExecutionListener;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangJiaLun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-12-11</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyJobListener</span> <span class="keyword">implements</span> <span class="title">JobExecutionListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeJob</span><span class="params">(JobExecution jobExecution)</span> </span>&#123;</span><br><span class="line">        System.out.println(jobExecution.getJobInstance().getJobName()+<span class="string">&quot;before...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterJob</span><span class="params">(JobExecution jobExecution)</span> </span>&#123;</span><br><span class="line">        System.out.println(jobExecution.getJobInstance().getJobName()+<span class="string">&quot;after...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>chunk 级别监听 基于注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wjl.springbatch.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.annotation.AfterChunk;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.annotation.BeforeChunk;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.scope.context.ChunkContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangJiaLun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-12-11</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyChunkListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeChunk</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeChunk</span><span class="params">(ChunkContext context)</span></span>&#123;</span><br><span class="line">        System.out.println(context.getStepContext().getStepName()+<span class="string">&quot;before...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterChunk</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterChunk</span><span class="params">(ChunkContext context)</span></span>&#123;</span><br><span class="line">        System.out.println(context.getStepContext().getStepName()+<span class="string">&quot;after...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>监听器使用demo</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wjl.springbatch.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.wjl.springbatch.listener.MyChunkListener;</span><br><span class="line"><span class="keyword">import</span> com.wjl.springbatch.listener.MyJobListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.Job;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.Step;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.JobBuilderFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.StepBuilderFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.ItemReader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.ItemWriter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.support.ListItemReader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangJiaLun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-12-11</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableBatchProcessing</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListenerDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  注入创建任务对象的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobBuilderFactory jobBuilderFactory;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  注入创建Step对象的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StepBuilderFactory stepBuilderFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Job <span class="title">listenerJob</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">&quot;listenerJob&quot;</span>)</span><br><span class="line">                .start(step1())</span><br><span class="line">                .listener(<span class="keyword">new</span> MyJobListener())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Step <span class="title">step1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">&quot;step1&quot;</span>)</span><br><span class="line">                <span class="comment">// 每次读取到 chunk(*) * 次 做输出处理</span></span><br><span class="line">                .&lt;String,String&gt;chunk(<span class="number">2</span>)</span><br><span class="line">                <span class="comment">// 容错</span></span><br><span class="line">                .faultTolerant()</span><br><span class="line">                .listener(<span class="keyword">new</span> MyChunkListener())</span><br><span class="line">                .reader(read())</span><br><span class="line">                .writer(writer())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ItemReader&lt;String&gt; <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ListItemReader&lt;&gt;(Arrays.asList(<span class="string">&quot;java&quot;</span>, <span class="string">&quot;spring&quot;</span>, <span class="string">&quot;mybatis&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ItemWriter&lt;String&gt; <span class="title">writer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ItemWriter&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(List&lt;? extends String&gt; items)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (String item: items)&#123;</span><br><span class="line">                    System.out.println(item);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Job-参数"><a href="#Job-参数" class="headerlink" title="Job 参数"></a>Job 参数</h3><ul>
<li><p>介绍： 在Job运行时 可以通过key=value形式传参</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wjl.springbatch.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.JobBuilderFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.StepBuilderFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.scope.context.ChunkContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.step.tasklet.Tasklet;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.repeat.RepeatStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangJiaLun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-12-11</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableBatchProcessing</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParametersDemo</span> <span class="keyword">implements</span> <span class="title">StepExecutionListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  注入创建任务对象的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobBuilderFactory jobBuilderFactory;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  注入创建Step对象的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StepBuilderFactory stepBuilderFactory;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  参数存储</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, JobParameter&gt; parameterMap;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Job <span class="title">parameterJob</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">&quot;parameterJob&quot;</span>)</span><br><span class="line">                .start(parameterStep())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  Job 执行的是step, Job使用的数据肯定是在step中使用的</span></span><br><span class="line"><span class="comment">     *  所以只需要给step传递数据</span></span><br><span class="line"><span class="comment">     *  使用step级别的监听来传递数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Step <span class="title">parameterStep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">&quot;parameterStep&quot;</span>)</span><br><span class="line">                .listener(<span class="keyword">this</span>)</span><br><span class="line">                .tasklet(<span class="keyword">new</span> Tasklet() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> RepeatStatus <span class="title">execute</span><span class="params">(StepContribution contribution, ChunkContext chunkContext)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        <span class="comment">// 输出接收到的参数值</span></span><br><span class="line">                        System.out.println(parameterMap.get(<span class="string">&quot;info&quot;</span>));</span><br><span class="line">                        <span class="keyword">return</span> RepeatStatus.FINISHED;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeStep</span><span class="params">(StepExecution stepExecution)</span> </span>&#123;</span><br><span class="line">        parameterMap = stepExecution.getJobParameters().getParameters();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ExitStatus <span class="title">afterStep</span><span class="params">(StepExecution stepExecution)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在idea启动配置里面Program arguments 传参 <code>info=wjl </code></p>
</li>
</ul>
<h3 id="IterReader-数据输入"><a href="#IterReader-数据输入" class="headerlink" title="IterReader 数据输入"></a>IterReader 数据输入</h3><h4 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wjl.springbatch.itemreader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.Job;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.Step;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.JobBuilderFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.StepBuilderFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangJiaLun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-12-16</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableBatchProcessing</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemReaderDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  注入创建任务对象的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobBuilderFactory jobBuilderFactory;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  注入创建Step对象的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StepBuilderFactory stepBuilderFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Job <span class="title">itemReaderDemoJob</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">&quot;itemReaderDemoJob&quot;</span>)</span><br><span class="line">                .start(itemReaderDemoStep())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Step <span class="title">itemReaderDemoStep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">&quot;itemReaderDemoStep&quot;</span>)</span><br><span class="line">                .&lt;String, String&gt;chunk(<span class="number">2</span>)</span><br><span class="line">                .reader(itemReaderDemoRead())</span><br><span class="line">                .writer(list -&gt;&#123;</span><br><span class="line">                    <span class="keyword">for</span> (String item : list) &#123;</span><br><span class="line">                        System.out.println(item + <span class="string">&quot;...&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyReader <span class="title">itemReaderDemoRead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; data = Arrays.asList(<span class="string">&quot;cat&quot;</span>, <span class="string">&quot;dog&quot;</span>, <span class="string">&quot;pig&quot;</span>, <span class="string">&quot;duck&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyReader(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wjl.springbatch.itemreader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.ItemReader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.NonTransientResourceException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.ParseException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.UnexpectedInputException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangJiaLun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-12-16</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyReader</span> <span class="keyword">implements</span> <span class="title">ItemReader</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Iterator&lt;String&gt; iterator;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyReader</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.iterator = list.iterator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> Exception, UnexpectedInputException, ParseException, NonTransientResourceException </span>&#123;</span><br><span class="line">        <span class="comment">// 数据一个一个数据读</span></span><br><span class="line">        <span class="keyword">if</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.iterator.next();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="从数据库中读取"><a href="#从数据库中读取" class="headerlink" title="从数据库中读取"></a>从数据库中读取</h4><p>JdbcPagingItemReader 分页读取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wjl.springbatch.itemreaderdb;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.Job;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.Step;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.JobBuilderFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.StepBuilderFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.StepScope;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.ItemWriter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.database.JdbcPagingItemReader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.database.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.database.support.MySqlPagingQueryProvider;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.RowMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangJiaLun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-12-16</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableBatchProcessing</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemReaderDbDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  注入创建任务对象的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobBuilderFactory jobBuilderFactory;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  注入创建Step对象的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StepBuilderFactory stepBuilderFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;dbJdbcWriter&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> ItemWriter&lt;AccessDemo&gt; dbJdbcWriter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Job <span class="title">itemReaderDbJob</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">&quot;itemReaderDbJob&quot;</span>)</span><br><span class="line">                .start(itemReaderDbStep())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Step <span class="title">itemReaderDbStep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">&quot;itemReaderDbStep&quot;</span>)</span><br><span class="line">                .&lt;AccessDemo, AccessDemo&gt;chunk(<span class="number">10</span>)</span><br><span class="line">                .reader(dbJdbcReader())</span><br><span class="line">                .writer(dbJdbcWriter)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@StepScope</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcPagingItemReader&lt;AccessDemo&gt; <span class="title">dbJdbcReader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        JdbcPagingItemReader&lt;AccessDemo&gt; reader = <span class="keyword">new</span> JdbcPagingItemReader&lt;&gt;();</span><br><span class="line">        reader.setDataSource(dataSource);</span><br><span class="line">        reader.setFetchSize(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">// 把读取到的记录转换成AccessDemo对象</span></span><br><span class="line">        reader.setRowMapper(<span class="keyword">new</span> RowMapper&lt;AccessDemo&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> AccessDemo <span class="title">mapRow</span><span class="params">(ResultSet resultSet, <span class="keyword">int</span> rows)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">                AccessDemo accessDemo = <span class="keyword">new</span> AccessDemo();</span><br><span class="line">                accessDemo.setId(resultSet.getInt(<span class="number">1</span>));</span><br><span class="line">                accessDemo.setUsername(resultSet.getString(<span class="number">2</span>));</span><br><span class="line">                accessDemo.setShopName(resultSet.getString(<span class="number">3</span>));</span><br><span class="line">                <span class="keyword">return</span> accessDemo;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 指定sql语句</span></span><br><span class="line">        MySqlPagingQueryProvider provider = <span class="keyword">new</span> MySqlPagingQueryProvider();</span><br><span class="line">        provider.setSelectClause(<span class="string">&quot;id, username, shop_name&quot;</span>);</span><br><span class="line">        provider.setFromClause(<span class="string">&quot;from access&quot;</span>);</span><br><span class="line">        <span class="comment">// 指定根据哪个字段排序</span></span><br><span class="line">        Map&lt;String, Order&gt; sort = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">        sort.put(<span class="string">&quot;id&quot;</span>, Order.ASCENDING);</span><br><span class="line">        provider.setSortKeys(sort);</span><br><span class="line">        reader.setQueryProvider(provider);</span><br><span class="line">        <span class="keyword">return</span> reader;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="从普通文件中读取数据"><a href="#从普通文件中读取数据" class="headerlink" title="从普通文件中读取数据"></a>从普通文件中读取数据</h4><p>FlatFileItemReader 普通文件数据读取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wjl.springbatch.itemreaderfile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.wjl.springbatch.model.AccessDemo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.Job;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.Step;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.JobBuilderFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.StepBuilderFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.StepScope;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.ItemWriter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.file.FlatFileItemReader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.file.mapping.DefaultLineMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.file.mapping.FieldSetMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.file.transform.DelimitedLineTokenizer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.file.transform.FieldSet;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.ClassPathResource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.BindException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangJiaLun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-12-16</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableBatchProcessing</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemReaderFileDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  注入创建任务对象的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobBuilderFactory jobBuilderFactory;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  注入创建Step对象的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StepBuilderFactory stepBuilderFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;flatFileWriter&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> ItemWriter&lt;AccessDemo&gt; flatFileWriter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Job  <span class="title">fileItemReaderDemoJob</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">&quot;fileItemReaderDemoJob&quot;</span>)</span><br><span class="line">                .start(fileItemReaderDemoStep())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Step <span class="title">fileItemReaderDemoStep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">&quot;fileItemReaderDemoStep&quot;</span>)</span><br><span class="line">                .&lt;AccessDemo, AccessDemo&gt;chunk(<span class="number">2</span>)</span><br><span class="line">                .reader(flatFileReader())</span><br><span class="line">                .writer(flatFileWriter)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@StepScope</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FlatFileItemReader&lt;AccessDemo&gt; <span class="title">flatFileReader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FlatFileItemReader&lt;AccessDemo&gt; reader = <span class="keyword">new</span> FlatFileItemReader&lt;&gt;();</span><br><span class="line">        reader.setResource(<span class="keyword">new</span> ClassPathResource(<span class="string">&quot;/metadata/accessdemo.txt&quot;</span>));</span><br><span class="line">        <span class="comment">// 跳过第1行</span></span><br><span class="line">        reader.setLinesToSkip(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 解析数据</span></span><br><span class="line">        DelimitedLineTokenizer tokenizer = <span class="keyword">new</span> DelimitedLineTokenizer();</span><br><span class="line">        tokenizer.setNames(<span class="keyword">new</span> String[]&#123;<span class="string">&quot;id&quot;</span>, <span class="string">&quot;username&quot;</span>&#125;);</span><br><span class="line">        <span class="comment">// 解析出来的数据单行映射为对象</span></span><br><span class="line">        DefaultLineMapper&lt;AccessDemo&gt; demoDefaultLineMapper = <span class="keyword">new</span> DefaultLineMapper&lt;&gt;();</span><br><span class="line">        demoDefaultLineMapper.setLineTokenizer(tokenizer);</span><br><span class="line">        demoDefaultLineMapper.setFieldSetMapper(<span class="keyword">new</span> FieldSetMapper&lt;AccessDemo&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> AccessDemo <span class="title">mapFieldSet</span><span class="params">(FieldSet fieldSet)</span> <span class="keyword">throws</span> BindException </span>&#123;</span><br><span class="line">                AccessDemo accessDemo = <span class="keyword">new</span> AccessDemo();</span><br><span class="line">                accessDemo.setId(fieldSet.readInt(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">                accessDemo.setUsername(fieldSet.readString(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">                <span class="keyword">return</span> accessDemo;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        demoDefaultLineMapper.afterPropertiesSet();</span><br><span class="line">        reader.setLineMapper(demoDefaultLineMapper);</span><br><span class="line">        <span class="keyword">return</span> reader;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="从XML文件中获取数据"><a href="#从XML文件中获取数据" class="headerlink" title="从XML文件中获取数据"></a>从XML文件中获取数据</h4><p>StaxEventItemReader</p>
<p>所需pom依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-oxm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.thoughtworks.xstream<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xstream<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wjl.springbatch.itemreaderxml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.wjl.springbatch.model.AccessDemo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.Job;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.Step;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.JobBuilderFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.StepBuilderFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.StepScope;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.ItemWriter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.xml.StaxEventItemReader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.ClassPathResource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.oxm.xstream.XStreamMarshaller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangJiaLun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-12-17</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableBatchProcessing</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemReaderXmlDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  注入创建任务对象的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobBuilderFactory jobBuilderFactory;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  注入创建Step对象的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StepBuilderFactory stepBuilderFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;xmlFileWriter&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> ItemWriter&lt;AccessDemo&gt; xmlFileWriter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Job <span class="title">xmlItemReaderDemoJob</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">&quot;xmlItemReaderDemoJob&quot;</span>)</span><br><span class="line">                .start(xmlItemReaderDemoStep())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Step <span class="title">xmlItemReaderDemoStep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">&quot;xmlItemReaderDemoStep&quot;</span>)</span><br><span class="line">                .&lt;AccessDemo, AccessDemo&gt;chunk(<span class="number">2</span>)</span><br><span class="line">                .reader(xmlFileReader())</span><br><span class="line">                .writer(xmlFileWriter)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@StepScope</span></span><br><span class="line">    <span class="keyword">public</span> StaxEventItemReader&lt;? extends AccessDemo&gt; xmlFileReader() &#123;</span><br><span class="line">        StaxEventItemReader&lt;AccessDemo&gt; reader = <span class="keyword">new</span> StaxEventItemReader&lt;&gt;();</span><br><span class="line">        reader.setResource(<span class="keyword">new</span> ClassPathResource(<span class="string">&quot;/metadata/accessdemo.xml&quot;</span>));</span><br><span class="line">        <span class="comment">// 指定需要处理的根标签</span></span><br><span class="line">        reader.setFragmentRootElementName(<span class="string">&quot;accessdemo&quot;</span>);</span><br><span class="line">        <span class="comment">// 把xml转成对象</span></span><br><span class="line">        XStreamMarshaller unmarshaller = <span class="keyword">new</span> XStreamMarshaller();</span><br><span class="line">        Map&lt;String, Class&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">        map.put(<span class="string">&quot;accessdemo&quot;</span>, AccessDemo.class);</span><br><span class="line">        unmarshaller.setAliases(map);</span><br><span class="line">        reader.setUnmarshaller(unmarshaller);</span><br><span class="line">        <span class="keyword">return</span> reader;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="从多个文件中读取数据"><a href="#从多个文件中读取数据" class="headerlink" title="从多个文件中读取数据"></a>从多个文件中读取数据</h4><p>MultiResourceItemReader</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wjl.springbatch.itemreadermulti;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.wjl.springbatch.model.AccessDemo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.Job;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.Step;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.JobBuilderFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.StepBuilderFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.configuration.annotation.StepScope;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.file.FlatFileItemReader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.file.MultiResourceItemReader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.file.mapping.DefaultLineMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.file.mapping.FieldSetMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.file.transform.DelimitedLineTokenizer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.file.transform.FieldSet;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.BindException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangJiaLun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-12-17</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableBatchProcessing</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemReaderMultiDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  注入创建任务对象的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobBuilderFactory jobBuilderFactory;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  注入创建Step对象的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StepBuilderFactory stepBuilderFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;classpath:/metadata/accessdemo*.txt&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Resource[] fileResources;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;multiFileWriter&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> MultiFileWriter multiFileWriter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Job <span class="title">multiItemReaderDemoJob</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">&quot;multiItemReaderDemoJob&quot;</span>)</span><br><span class="line">                .start(multiItemReaderDemoStep())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Step <span class="title">multiItemReaderDemoStep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">&quot;multiItemReaderDemoStep&quot;</span>)</span><br><span class="line">                .&lt;AccessDemo, AccessDemo&gt;chunk(<span class="number">2</span>)</span><br><span class="line">                .reader(multiFileReader())</span><br><span class="line">                .writer(multiFileWriter)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@StepScope</span></span><br><span class="line">    <span class="keyword">public</span> MultiResourceItemReader&lt;? extends AccessDemo&gt; multiFileReader() &#123;</span><br><span class="line">        MultiResourceItemReader&lt;AccessDemo&gt; reader = <span class="keyword">new</span> MultiResourceItemReader&lt;&gt;();</span><br><span class="line">        reader.setDelegate(flatFileReader());</span><br><span class="line">        reader.setResources(fileResources);</span><br><span class="line">        <span class="keyword">return</span> reader;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@StepScope</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FlatFileItemReader&lt;AccessDemo&gt; <span class="title">flatFileReader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FlatFileItemReader&lt;AccessDemo&gt; reader = <span class="keyword">new</span> FlatFileItemReader&lt;&gt;();</span><br><span class="line">        <span class="comment">// 跳过第1行</span></span><br><span class="line">        reader.setLinesToSkip(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 解析数据</span></span><br><span class="line">        DelimitedLineTokenizer tokenizer = <span class="keyword">new</span> DelimitedLineTokenizer();</span><br><span class="line">        tokenizer.setNames(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="comment">// 解析出来的数据单行映射为对象</span></span><br><span class="line">        DefaultLineMapper&lt;AccessDemo&gt; demoDefaultLineMapper = <span class="keyword">new</span> DefaultLineMapper&lt;&gt;();</span><br><span class="line">        demoDefaultLineMapper.setLineTokenizer(tokenizer);</span><br><span class="line">        demoDefaultLineMapper.setFieldSetMapper(<span class="keyword">new</span> FieldSetMapper&lt;AccessDemo&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> AccessDemo <span class="title">mapFieldSet</span><span class="params">(FieldSet fieldSet)</span> <span class="keyword">throws</span> BindException </span>&#123;</span><br><span class="line">                AccessDemo accessDemo = <span class="keyword">new</span> AccessDemo();</span><br><span class="line">                accessDemo.setId(fieldSet.readInt(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">                accessDemo.setUsername(fieldSet.readString(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">                <span class="keyword">return</span> accessDemo;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        demoDefaultLineMapper.afterPropertiesSet();</span><br><span class="line">        reader.setLineMapper(demoDefaultLineMapper);</span><br><span class="line">        <span class="keyword">return</span> reader;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="ItemReader异常处理及重启"><a href="#ItemReader异常处理及重启" class="headerlink" title="ItemReader异常处理及重启"></a>ItemReader异常处理及重启</h4><p>实现 ItemStreamReader 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wjl.springbatch.restart;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangJiaLun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-12-16</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRestartReader</span> <span class="keyword">implements</span> <span class="title">ItemStreamReader</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Iterator&lt;String&gt; iterator;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyRestartReader</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.iterator = list.iterator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> Exception, UnexpectedInputException, ParseException, NonTransientResourceException </span>&#123;</span><br><span class="line">        <span class="comment">// 数据一个一个数据读</span></span><br><span class="line">        <span class="keyword">if</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.iterator.next();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *   step 执行前处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> executionContext</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ItemStreamException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(ExecutionContext executionContext)</span> <span class="keyword">throws</span> ItemStreamException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;open...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  chunk 处理完一批数据后触发</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> executionContext</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ItemStreamException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(ExecutionContext executionContext)</span> <span class="keyword">throws</span> ItemStreamException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;update...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *   step 执行完之后触发</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ItemStreamException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> ItemStreamException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;close...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="ItemWriter"><a href="#ItemWriter" class="headerlink" title="ItemWriter"></a>ItemWriter</h4><p>itemReader 是一个数据一个数据读,ItemWriter 是一批一批输出</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wjl.springbatch.itemwriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.ItemWriter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangJiaLun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-12-19</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Component(&quot;itemWriterDemo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemWriterDemo</span> <span class="keyword">implements</span> <span class="title">ItemWriter</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(List&lt;? extends String&gt; items)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(items.size());</span><br><span class="line">        <span class="keyword">for</span> (String item : items) &#123;</span><br><span class="line">            System.out.println(item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Itemwriter-输出到数据库"><a href="#Itemwriter-输出到数据库" class="headerlink" title="Itemwriter 输出到数据库"></a>Itemwriter 输出到数据库</h4><p>Neo4jItemWriter </p>
<p>MongoItemWriter </p>
<p>RepositoryItemWriter</p>
<p>HibernateItemWriter</p>
<p>JdbcBatchItemWriter</p>
<p>JpaItemWriter</p>
<p>GemfireItemWriter</p>
<h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><a href="https://github.com/wangJiaLun-china/springbatch">git地址</a></p>
]]></content>
      <categories>
        <category>批处理</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>no sapjco3 in java.library.path</title>
    <url>/2021-09-29-sap%20%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95%20no%20sapjco3%20in%20java.library.path/</url>
    <content><![CDATA[<h3 id="问题记录-no-sapjco3-in-java-library-path"><a href="#问题记录-no-sapjco3-in-java-library-path" class="headerlink" title="问题记录: no sapjco3 in java.library.path"></a>问题记录: no sapjco3 in java.library.path</h3><p>对接厂家的SAP系统, 部署至linux环境时报下面的错误日志, 查了缺libsapjco3.so包</p>
<p>对应包下载地址 <code>链接：https://pan.baidu.com/s/1YO0ZJq4J_SL9dI8VyuDsBg 提取码：8888</code></p>
<p>查了很多帖子是放在tomcat里, 现在springboot直接jar跑不方便加进去, 下面是配置到环境变量中</p>
<ul>
<li><p>错误日志</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.lang.UnsatisfiedLinkError: no sapjco3 in java.library.path</span><br><span class="line">	at java.lang.ClassLoader.loadLibrary(ClassLoader.java:<span class="number">1886</span>)</span><br><span class="line">	at java.lang.Runtime.loadLibrary0(Runtime.java:<span class="number">849</span>)</span><br><span class="line">	at java.lang.System.loadLibrary(System.java:<span class="number">1088</span>)</span><br><span class="line">	at com.sap.conn.jco.rt.DefaultJCoRuntime.loadLibrary(DefaultJCoRuntime.java:<span class="number">441</span>)</span><br><span class="line">	at com.sap.conn.jco.rt.DefaultJCoRuntime.registerNativeMethods(DefaultJCoRuntime.java:<span class="number">307</span>)</span><br><span class="line">	at com.sap.conn.jco.rt.JCoRuntime.registerNatives(JCoRuntime.java:<span class="number">969</span>)</span><br><span class="line">	at com.sap.conn.rfc.driver.CpicDriver.&lt;clinit&gt;(CpicDriver.java:<span class="number">955</span>)</span><br><span class="line">	at com.sap.conn.rfc.engine.DefaultRfcRuntime.getVersion(DefaultRfcRuntime.java:<span class="number">43</span>)</span><br><span class="line">	at com.sap.conn.rfc.api.RfcApi.RfcGetVersion(RfcApi.java:<span class="number">261</span>)</span><br><span class="line">	at com.sap.conn.jco.rt.MiddlewareJavaRfc.&lt;clinit&gt;(MiddlewareJavaRfc.java:<span class="number">200</span>)</span><br><span class="line">	at com.sap.conn.jco.rt.DefaultJCoRuntime.initialize(DefaultJCoRuntime.java:<span class="number">73</span>)</span><br><span class="line">	at com.sap.conn.jco.rt.JCoRuntimeFactory.&lt;clinit&gt;(JCoRuntimeFactory.java:<span class="number">23</span>)</span><br><span class="line">	at java.lang.Class.forName0(Native Method)</span><br><span class="line">	at java.lang.Class.forName(Class.java:<span class="number">191</span>)</span><br><span class="line">	at com.sap.conn.jco.JCo.createJCo(JCo.java:<span class="number">52</span>)</span><br><span class="line">	at com.sap.conn.jco.JCo.&lt;clinit&gt;(JCo.java:<span class="number">26</span>)</span><br><span class="line">	at com.sap.conn.jco.JCoDestinationManager.getDestination(JCoDestinationManager.java:<span class="number">61</span>)</span><br><span class="line">	at com.changhong.vmi.admin.xfire.jco.SrmSapJCo.getGoodsPlan(SrmSapJCo.java:<span class="number">79</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<p>​    <span id="more"></span></p>
<ul>
<li><p>解决方案</p>
<p>将<code>sapjco3.jar</code>和<code>libsapjco3.so</code>上传到服务器上, 配置 /etc/profile</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">java environment</span></span><br><span class="line">export JAVA_HOME=/usr/local/jdk/jdk1.8.0_181</span><br><span class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/jre/lib/rt.jar:$&#123;JAVA_HOME&#125;/lib/dt.jar:$&#123;JAVA_HOME&#125;/lib/tools.jar:$&#123;JAVA_HOME&#125;/lib/sapjco3.jar</span><br><span class="line">export PATH=$PATH:$&#123;JAVA_HOME&#125;/bin</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 我把libsapjco3.so上传到这个路径下了</span></span><br><span class="line">export LD_LIBRARY_PATH=/usr/local/jdk/jdk1.8.0_181/jre/lib/amd64/server</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>sap</category>
      </categories>
      <tags>
        <tag>sap</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式限流</title>
    <url>/2022-02-20-%E5%88%86%E5%B8%83%E5%BC%8F%E9%99%90%E6%B5%81/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="分布式限流"><a href="#分布式限流" class="headerlink" title="分布式限流"></a>分布式限流</h1><h2 id="Guava-RateLimiter-客户端限流"><a href="#Guava-RateLimiter-客户端限流" class="headerlink" title="Guava RateLimiter 客户端限流"></a>Guava RateLimiter 客户端限流</h2><h2 id="基于Nginx的IP限流"><a href="#基于Nginx的IP限流" class="headerlink" title="基于Nginx的IP限流"></a>基于Nginx的IP限流</h2><h2 id="基于Nginx的连接数限制"><a href="#基于Nginx的连接数限制" class="headerlink" title="基于Nginx的连接数限制"></a>基于Nginx的连接数限制</h2>]]></content>
      <categories>
        <category>分布式限流</category>
      </categories>
      <tags>
        <tag>分布式限流</tag>
      </tags>
  </entry>
</search>
